var N=null,E="",T="t",U="u",searchIndex={};
var R=["litstr","structure","tokenstream","varisat_formula::cnf","newvariter","uniformtuple","var_count","usize","varisat_formula","strategy","varisat_formula::lit","positive","negative","from_index","from_dimacs","to_dimacs","Shortcut for tests","cnf_formula","try_from","try_into","borrow_mut","result","type_id","to_owned","clone_into","to_string","add_clause","assert_receiver_is_total_eq","ordering","cnfformula","partial_cmp","formatter","CnfFormula","NewVarIter","ExtendFormula","UniformTuple","varisat_internal_proof","varisat_internal_proof::ProofStep","propagation_hashes","clausehash","proofstep","borrow","typeid","varisat_internal_proof::binary_format","deleteclauseproof","DeleteClauseProof","ProofStep","clause_count","varisat_dimacs","varisat_dimacs::ParserError","dimacsparser","parsererror","dimacsheader","backtrace","DimacsHeader","DimacsParser","ParserError","option","default","user_var","varisat_checker","varisat_checker::CheckedProofStep","clause","propagations","keep_as_redundant","varisat_checker::ProofTranscriptStep","AddClause","assignment","assumptions","FailedAssumptions","failed_core","varisat_checker::CheckerError","Varisat internal interface used for on-the-fly checking.","checkererror","clausehasherp","variablesp","clausesp","checkerstatep","Central checker data structure.","clauses","ProcessingP","processing","CheckedUserVar","Corresponding user variable for a proof variable.","sampling_mode","ResolutionPropagations","A list of clauses to resolve and propagations to show that…","CheckerData","Checker data available to proof processors.","CheckedProofStep","A single step of a proof.","Updates the corresponding user variable for a proof…","varisat_checker::processing","A clause of the input formula.","varisat_checker::processing::CheckedProofStep","DuplicatedClause","A duplicated clause of the input formula.","same_as_id","TautologicalClause","A tautological clause of the input formula.","Addition of an asymmetric tautology (AT).","redundant","DeleteClause","Deletion of a redundant clause.","DeleteAtClause","Deletion of a clause that is an asymmetric tautology w.r.t…","DeleteRatClause","Deletion of a resolution asymmetric tautology w.r.t the…","MakeIrredundant","Make a redundant clause irredundant.","A (partial) assignment that satisfies all clauses and…","Assumptions","Change the active set of assumptions.","Subset of assumptions incompatible with the formula.","CheckedSamplingMode","Sampling mode of a user variable.","process_step","checkedproofstep","Process a single step","checkerdata","A checker for unsatisfiability proofs in the native…","tmpdatap","transcript","ProofTranscriptStep","Step of a proof transcript.","WitnessVar","SampleVar","varisat_checker::transcript","varisat_checker::transcript::ProofTranscriptStep","ObserveInternalVar","prooftranscriptstep","variables","ProofProcessor","Implement to process proof steps.","ProofTranscriptProcessor","Implement to process transcript steps.","Process a single proof transcript step.","Adds a clause to the checker.","check_proof","Checks a proof in the native Varisat format.","part_ptr_mut","part_ptr","varisat_checker::clauses","varisat_checker::context","varisat_checker::context::parts","varisat_checker::hash","varisat_checker::rup","varisat_checker::state","varisat_checker::tmp","varisat_checker::variables","self_check_step","self_check_delayed_steps","storeclauseresult","deleteclauseresult","samplingmode","processingp","rupcheckp","innerpart","CheckerError","SelfChecker","ClauseLits","UnitClause","StoreClauseResult","DeleteClauseResult","ClauseHasher","Processing","TraceItem","CheckerState","Transcript","Variables","SamplingMode","CheckerStateP","ClauseHasherP","RupCheckP","VariablesP","AtClause","clause_hash","WriteLrat","impl into<sizerange>","impl strategy<value = usize>","A formula in conjunctive normal form (CNF).","clause_ranges","Extend a formula with new variables and clauses.","Appends a clause to the formula.","Add a new variable to the formula and return it.","Add a new variable to the formula and return it as…","new_var_iter","Iterator over multiple new variables.","new_lit_iter","Iterator over multiple new literals.","Add multiple new variables and return them.","Add multiple new variables and return them as positive…","A boolean literal.","A boolean variable.","vsids_decay","Multiplicative decay for the VSIDS decision heuristic.","clause_activity_decay","Multiplicative decay for clause activities.","reduce_locals_interval","Number of conflicts between local clause reductions.","reduce_mids_interval","Number of conflicts between mid clause reductions.","luby_restart_interval_scale","Scaling factor for luby sequence based restarts (number of…","solverconfigupdate","ProofFormat","Proof formats that can be generated during solving.","BinaryDrat","varisat::solver","varisat::solver::SolverError","solvererror","analyze_conflict","Learns a new clause by analyzing a conflict.","clause_hashes","varisat","Incremental solving.","watchlistsp","assumption_levels","user_failed_core","Subset of assumptions that made the formula unsatisfiable.","Binary clauses.","set_var_count","Update structures for a new variable count.","foundconflict","Clause activity.","clauseallocp","clausedbp","varisat::clause","clausealloc","clauseref","clauseheader","implgraphp","tmpflagsp","Database for long clauses.","assignmentp","count_by_tier","header_mut","Central solver data structure.","solverconfigp","The VSIDS branching heuristic.","activity","The value to add on bumping.","inv_decay","The inverse of the decay factor.","rescale_limit","Rescale activities if any value exceeds this value.","set_decay","Change the decay factor.","Rescale all values to avoid an overflow.","make_available","Global model reconstruction","Assignment of the global model.","Proof generation.","solverstatep","close_proof","varisat::proof","Maps literals and hashes of clause steps between the…","write_proof","proofformat","proofprocessor","conflict","full_restart","assumptionsp","lit_is_true","varisat::prop","binaryclausesp","The implication graph.","Conflict","Watchlists to detect clauses that became unit.","Contains only valid data for indices of assigned variables.","Scheduling of processing and solving steps.","Miscellaneous solver state.","unit_simplify","Remove satisfied clauses and false literals.","Variable mapping and metadata.","global_from_user","solver_from_global","observe_internal_vars","Data associated with variables.","varisat::variables","varbimapmut","Insert a new mapping.","Remove a mapping.","Number of allocated global variables.","Get an unmapped global variable.","varisat::dimacs","varisat::dimacs::ParserError","impl io::write","varisat::checker","varisat::checker::CheckedProofStep","varisat::checker::CheckerError","ProofProcessorError","__Nonexhaustive","varisat::checker::ProofTranscriptStep","varisat::cnf","varisat::config","varisat::analyze_conflict","varisat::assumptions","varisat::binary","varisat::cdcl","varisat::clause::activity","varisat::clause::alloc","varisat::clause::db","varisat::clause::header","varisat::context","varisat::context::parts","varisat::decision::vsids","into_iter","varisat::model","varisat::proof::map_step","varisat::prop::assignment","varisat::prop::graph","varisat::prop::watch","varisat::schedule","varisat::schedule::luby","varisat::state","varisat::tmp","varisat::variables::data","varisat::variables::var_map","clauseactivityp","watchlists","schedule","satstate","vardata","impl io::read","add_formula","add_dimacs_cnf","Reads and adds a formula in DIMACS CNF format.","add_processor","Add a [`ProofProcessor`].","SolverConfig","SolverConfigUpdate","SolverError","AnalyzeConflict","LevelAbstraction","EnqueueAssumption","BinaryClauses","FoundConflict","ClauseActivity","ClauseAlloc","ClauseRef","ClauseHeader","Assignment","ImplGraph","Watchlists","LubySequence","SolverState","VarBiMapMut","AnalyzeConflictP","AssignmentP","BinaryClausesP","ClauseActivityP","ClauseAllocP","ClauseDbP","ImplGraphP","AssumptionsP","ScheduleP","SolverConfigP","SolverStateP","TmpFlagsP","WatchlistsP","Proof checker for Varisat proofs.","Possible errors while checking a varisat proof.","ProofIncomplete","ParseError","CheckFailed","debug_step","garbage_size","delete_clause","collect_garbage","context","lit_value","Part declarations for the [`Context`] struct.","TmpDataP","hash_bits","How many bits are used for storing clause hashes.","new_var","user_from_proof_var","User variable corresponding to proof variable.","Temporary data.","Variable metadata.","Create a new checker.","Add a formula to the checker.","add_transcript","Add a [`ProofTranscriptProcessor`].","prooftranscriptprocessor","checker","Variable and clause count present in a DIMACS CNF header.","Parser for DIMACS CNF files.","partial_clause","line_number","partial_lit","negate_next_lit","in_comment_or_header","in_header","start_of_line","header_line","Possible errors while parsing a DIMACS CNF formula.","UnexpectedInput","unexpected","LiteralTooLarge","final_digit","InvalidHeader","UnterminatedClause","header_var_count","ClauseCount","header_clause_count","PreviousError","write_dimacs_header","Write a DIMACS CNF header.","write_dimacs_clauses","Write an iterator of clauses as headerless DIMACS CNF.","write_dimacs","Write a formula as DIMACS CNF.","Create a new DIMACS CNF parser.","Parse the given input and check the header if present.","parse_incremental","Parse the given input incrementally and check the header…","parse_chunk","Parse a chunk of input.","Finish parsing the input.","check_header","Verifies the header information when present.","take_formula","Returns the subformula of everything parsed since the last…","Return the DIMACS CNF header data if present.","Number of clauses parsed.","Number of variables in the parsed formula.","CNF formulas.","literals","Iterator over new variables or literals.","vars_left","vec_formula","new_vars","new_lits","Helper trait to initialize multiple variables of the same…","tuple_len","tuple_from_iter","Create an empty CNF formula.","Number of variables in the formula.","Increase the number of variables in the formula.","Number of clauses in the formula.","Iterator over all clauses.","Literals and variables.","The backing type used to represent literals and variables.","Creates a variable from a 1-based index as used in the…","Creates a variable from a 0-based index.","The 1-based index representing this variable in the DIMACS…","The 0-based index representing this variable.","The variable with largest index that is supported.","max_count","Largest number of variables supported.","Creates a literal from this var and a `bool` that is…","Creates a positive literal from this var.","Creates a negative literal from this var.","Creates a literal from a `Var` and a `bool` that is `true`…","Create a positive literal from a `Var`.","Create a negative literal from a `Var`.","Create a literal from a variable index and a `bool` that…","from_code","Create a literal with the given encoding.","Creates a literal from an integer.","1-based Integer representation of the literal, opposite of…","0-based index of the literal's variable.","The literal's variable.","is_negative","Whether the literal is negative, i.e. a negated variable.","is_positive","Whether the literal is positive, i.e. a non-negated…","Two times the variable's index for positive literals and…","Apply a function to the variable of the literal, without…","write_step","write_literals"];
searchIndex["varisat"]={"doc":"Varisat is a [CDCL][cdcl] based SAT solver written in…","i":[[0,"cnf",R[214],R[428],N,N],[3,R[32],R[294],R[180],N,N],[12,R[6],E,E,0,N],[12,R[429],E,E,0,N],[12,R[181],E,E,0,N],[8,R[34],E,R[182],N,N],[10,R[26],E,R[183],1,[[["self"]]]],[10,R[376],E,R[184],1,[[["self"]],["var"]]],[11,"new_lit",E,R[185],1,[[["self"]],["lit"]]],[11,R[186],E,R[187],1,[[["self"],[R[7]]],[[R[4],["var"]],["var"]]]],[11,R[188],E,R[189],1,[[["self"],[R[7]]],[[R[4],["lit"]],["lit"]]]],[11,R[433],E,R[190],1,[[["self"]],["vars"]]],[11,R[434],E,R[191],1,[[["self"]],["lits"]]],[3,R[33],E,R[430],N,N],[12,"formula",E,E,2,N],[12,R[431],E,E,2,N],[12,"phantom",E,E,2,N],[8,R[35],E,R[435],N,N],[10,R[436],E,E,3,[[],[R[7]]]],[10,R[437],E,E,3,[[["impl iterator<item = item>"]],["self"]]],[0,R[9],E,E,N,N],[5,R[432],"varisat::cnf::strategy",E,N,[[[R[178]],[R[179]]]]],[5,R[17],E,E,N,[[[R[178]],[R[179]]]]],[14,"cnf",R[214],R[16],N,N],[0,"lit",E,R[443],N,N],[6,"LitIdx","varisat::lit",R[444],N,N],[3,"Var",E,R[193],N,N],[12,"index",E,E,4,N],[3,"Lit",E,R[192],N,N],[12,"code",E,E,5,N],[0,R[9],E,E,N,N],[5,"var","varisat::lit::strategy",E,N,[[[R[179]]]]],[5,"lit",E,E,N,[[[R[179]]]]],[14,"lit",R[214],R[16],N,N],[3,R[32],E,R[180],N,N],[12,R[6],E,E,0,N],[12,R[429],E,E,0,N],[12,R[181],E,E,0,N],[8,R[34],E,R[182],N,N],[10,R[26],E,R[183],1,[[["self"]]]],[10,R[376],E,R[184],1,[[["self"]],["var"]]],[11,"new_lit",E,R[185],1,[[["self"]],["lit"]]],[11,R[186],E,R[187],1,[[["self"],[R[7]]],[[R[4],["var"]],["var"]]]],[11,R[188],E,R[189],1,[[["self"],[R[7]]],[[R[4],["lit"]],["lit"]]]],[11,R[433],E,R[190],1,[[["self"]],["vars"]]],[11,R[434],E,R[191],1,[[["self"]],["lits"]]],[3,"Lit",E,R[192],N,N],[12,"code",E,E,5,N],[3,"Var",E,R[193],N,N],[12,"index",E,E,4,N],[4,R[205],E,R[206],N,N],[13,"Varisat",E,E,6,N],[13,"Drat",E,E,6,N],[13,R[207],E,E,6,N],[0,"config",E,"Solver configuration.",N,N],[3,R[330],R[295],"Configurable parameters used during solving.",N,N],[12,R[194],E,R[195],7,N],[12,R[196],E,R[197],7,N],[12,R[198],E,R[199],7,N],[12,R[200],E,R[201],7,N],[12,R[202],E,R[203],7,N],[3,R[331],E,"Updates configuration values of [`SolverConfig`].",N,N],[12,R[194],E,R[195],8,N],[12,R[196],E,R[197],8,N],[12,R[198],E,R[199],8,N],[12,R[200],E,R[201],8,N],[12,R[202],E,R[203],8,N],[17,"_DERIVE_Default_FOR_SolverConfig",E,E,N,N],[17,"_IMPL_SERIALIZE_FOR_SolverConfigUpdate",E,E,N,N],[17,"_IMPL_DESERIALIZE_FOR_SolverConfigUpdate",E,E,N,N],[11,"help",E,"Return a string describing all supported configuration…",7,[[],["str"]]],[11,"new",E,"Create an empty config update.",8,[[],[R[204]]]],[11,"apply",E,"Apply the configuration update.",8,[[["self"],["solverconfig"]],[["error"],[R[21],["error"]]]]],[11,"merge",E,"Merge two configuration updates.",8,[[["self"],[R[204]]]]],[0,"solver",R[214],"Boolean satisfiability solver.",N,N],[3,"Solver",R[208],"A boolean satisfiability solver.",N,N],[12,"ctx",E,E,9,N],[4,R[205],E,R[206],N,N],[13,"Varisat",E,E,6,N],[13,"Drat",E,E,6,N],[13,R[207],E,E,6,N],[4,R[332],E,"Possible errors while solving a formula.",N,N],[13,"Interrupted",E,E,10,N],[13,R[291],E,E,10,N],[12,"cause",R[209],E,10,N],[13,"ProofIoError",R[208],E,10,N],[12,"cause",R[209],E,10,N],[13,R[292],R[208],E,10,N],[17,"_DERIVE_failure_Fail_FOR_SolverError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_SolverError",E,E,N,N],[11,"is_recoverable",E,"Whether a Solver instance can be used after producing such…",10,[[["self"]],["bool"]]],[11,"new",E,"Create a new solver.",9,[[],["solver"]]],[11,"config",E,"Change the solver configuration.",9,[[["self"],[R[204]]],[[R[21],["error"]],["error"]]]],[11,R[325],E,"Add a formula to the solver.",9,[[["self"],[R[29]]]]],[11,R[326],E,R[327],9,[[["self"]],[[R[21],["error"]],["error"]]]],[11,"witness_var",E,"Sets the \"witness\" sampling mode for a variable.",9,[[["self"],["var"]]]],[11,"sample_var",E,"Sets the \"sample\" sampling mode for a variable.",9,[[["self"],["var"]]]],[11,"hide_var",E,"Hide a variable.",9,[[["self"],["var"]]]],[11,R[277],E,"Observe solver internal variables.",9,[[["self"]],[["var"],["vec",["var"]]]]],[11,"solve",E,"Check the satisfiability of the current formula.",9,[[["self"]],[[R[210]],[R[21],["bool",R[210]]],["bool"]]]],[11,"check_for_solver_error",E,"Check for asynchronously generated errors.",9,[[["self"]],[[R[21],[R[210]]],[R[210]]]]],[11,"assume",E,"Assume given literals for future calls to solve.",9,[[["self"]]]],[11,"model",E,"Set of literals that satisfy the formula.",9,[[["self"]],[[R[57],["vec"]],["vec",["lit"]]]]],[11,R[70],E,"Subset of the assumptions that made the formula…",9,[[["self"]],[R[57]]]],[11,R[257],E,"Generate a proof of unsatisfiability during solving.",9,[[["self"],[R[258]]]]],[11,R[254],E,"Stop generating a proof of unsatisfiability.",9,[[["self"]],[[R[21],[R[210]]],[R[210]]]]],[11,"enable_self_checking",E,"Generate and check a proof on the fly.",9,[[["self"]]]],[11,"add_proof_processor",E,"Generate a proof and process it using a [`ProofProcessor`].",9,[[["self"],[R[259]]]]],[0,R[211],R[214],R[212],N,N],[3,R[333],R[296],"Temporaries for conflict analysis",N,N],[12,R[62],E,"This is the learned clause after analysis finishes.",11,N],[12,"current_level_count",E,"Number of literals in the current clause at the current…",11,N],[12,"var_flags",E,"Variables in the current clause.",11,N],[12,"to_clean",E,"Entries to clean in `var_flags`.",11,N],[12,"involved",E,"Clauses to bump.",11,N],[12,R[213],E,"Hashes of all involved clauses needed to proof the…",11,N],[12,"unordered_clause_hashes",E,"Clause hashes paired with the trail depth of the…",11,N],[12,"stack",E,"Stack for recursive minimization.",11,N],[3,R[334],E,"A Bloom filter of levels.",N,N],[12,"bits",E,E,12,N],[5,R[211],E,R[212],N,[[["trailp"],["const",["proofp","const"]],["const",["trailp","const"]],[R[260]]],[R[7]]]],[5,"add_literal",E,"Add a literal to the current clause.",N,[[["trailp"],["const",[R[231],"mut"]],["const",["trailp","const"]],["lit"]]]],[5,"minimize_clause",E,"Performs recursive clause minimization.",N,[[["trailp"],["const",["proofp","const"]],["const",["trailp","const"]]]]],[11,R[221],E,R[222],11,[[["self"],[R[7]]]]],[11,R[62],E,"The learned clause.",11,[[["self"]]]],[11,"involved",E,"Long clauses involved in the conflict.",11,[[["self"]]]],[11,R[213],E,"Hashes of clauses involved in the proof of the learned…",11,[[["self"]]]],[11,"add",E,"Add a level to the Bloom filter.",12,[[["self"],[R[7]]]]],[11,"test",E,"Test whether a level could be in the Bloom filter.",12,[[["self"],[R[7]]],["bool"]]],[0,R[68],R[214],R[215],N,N],[3,R[111],R[297],R[215],N,N],[12,R[68],E,E,13,N],[12,R[70],E,E,13,N],[12,R[218],E,E,13,N],[12,R[217],E,E,13,N],[12,"failed_propagation_hashes",E,E,13,N],[4,R[335],E,"Return type of [`enqueue_assumption`].",N,N],[13,"Done",E,E,14,N],[13,"Enqueued",E,E,14,N],[13,R[267],E,E,14,N],[5,"set_assumptions",E,"Change the currently active assumptions.",N,[[[R[216]],["mut",[R[216],"mut"]],["mut",["vsidsp","mut"]]]]],[5,"enqueue_assumption",E,"Enqueue another assumption if possible.",N,[[["const",[R[75],"const"]],[R[75]],["const",[R[225],"mut"]]],["enqueueassumption"]]],[5,"analyze_assumption_conflict",E,"Analyze a conflicting set of assumptions.",N,[[["const",["trailp","const"]],[R[75]],["lit"],["const",[R[75],"const"]]]]],[11,R[217],E,"Current number of decision levels used for assumptions.",13,[[["self"]],[R[7]]]],[11,R[261],E,"Resets assumption_levels to zero on a full restart.",13,[[["self"]]]],[11,R[70],E,R[219],13,[[["self"]]]],[11,R[218],E,R[219],13,[[["self"]]]],[11,R[68],E,"Current assumptions.",13,[[["self"]]]],[0,"binary",R[214],R[220],N,N],[3,R[336],R[298],R[220],N,N],[12,"by_lit",E,E,15,N],[12,"count",E,E,15,N],[5,"simplify_binary",E,"Remove binary clauses that have an assigned literal.",N,[[[R[75]],["const",[R[75],"const"]],["const",[R[234],"mut"]]]]],[11,R[221],E,R[222],15,[[["self"],[R[7]]]]],[11,"add_binary_clause",E,"Add a binary clause.",15,[[["self"]]]],[11,"implied",E,"Implications of a given literal",15,[[["self"],["lit"]]]],[11,"count",E,"Number of binary clauses.",15,[[["self"]],[R[7]]]],[0,"cdcl",R[214],"Conflict driven clause learning.",N,N],[4,R[337],R[299],"Return type of [`find_conflict`].",N,N],[13,R[267],E,E,16,N],[13,"Assumption",E,E,16,N],[5,"conflict_step",E,"Find a conflict, learn a clause and backtrack.",N,[[[R[216]],["mut",[R[216],"mut"]],["mut",["vsidsp","mut"]]]]],[5,"find_conflict",E,"Find a conflict.",N,[[[R[216]],["mut",["vsidsp","mut"]],["mut",[R[216],"mut"]]],[[R[21],[R[223]]],[R[223]]]]],[0,R[62],R[214],"Clause storage.",N,N],[3,"Clause",R[227],"A clause.",N,N],[12,"data",E,E,17,N],[0,R[240],E,R[224],N,N],[3,R[338],R[300],R[224],N,N],[12,"bump",E,R[241],18,N],[12,R[242],E,R[243],18,N],[5,R[244],E,R[245],N,[[],["f32"]]],[5,"bump_clause_activity",E,"Increase a clause's activity.",N,[[[R[229]],["mut",[R[226],"mut"]],["mut",[R[225],"mut"]],[R[226]]]]],[5,"rescale_clause_activities",E,R[248],N,[[["mut",[R[226],"mut"]],["mut",[R[225],"mut"]],[R[226]]]]],[5,"decay_clause_activities",E,"Decay the clause activities.",N,[[["mut",[R[226],"mut"]],["mut",[R[225],"mut"]],[R[226]]]]],[11,R[246],E,R[247],18,[[["self"],["f32"]]]],[0,"alloc",R[227],"Clause allocator.",N,N],[3,R[339],R[301],"Bump allocator for clause storage.",N,N],[12,"buffer",E,E,19,N],[3,R[340],E,"Compact reference to a clause.",N,N],[12,"offset",E,E,20,N],[6,"ClauseOffset",E,"Integer type used to store offsets into [`ClauseAlloc`]'s…",N,N],[11,"new",E,"Create an emtpy clause allocator.",19,[[],[R[228]]]],[11,"with_capacity",E,"Create a clause allocator with preallocated capacity.",19,[[[R[7]]],[R[228]]]],[11,R[26],E,"Allocate space for and add a new clause.",19,[[["self"],[R[230]]],[R[229]]]],[11,"header",E,"Access the header of a clause.",19,[[["self"],[R[229]]],[R[230]]]],[11,R[236],E,"Mutate the header of a clause.",19,[[["self"],[R[229]]],[R[230]]]],[11,"header_unchecked",E,E,19,[[["self"],[R[229]]],[R[230]]]],[11,"header_unchecked_mut",E,"Mutate the header of a clause without bound checks.",19,[[["self"],[R[229]]],[R[230]]]],[11,R[62],E,"Access a clause.",19,[[["self"],[R[229]]],[R[62]]]],[11,"clause_mut",E,"Mutate a clause.",19,[[["self"],[R[229]]],[R[62]]]],[11,"lits_ptr_mut_unchecked",E,"Mutate the literals of a clause without bound checks.",19,[[["self"],[R[229]]]]],[11,"check_bounds",E,"Perform a manual bound check on a ClauseRef assuming a…",19,[[["self"],[R[229]],[R[7]]]]],[11,"clause_with_len_unchecked",E,E,19,[[["self"],[R[229]],[R[7]]],[R[62]]]],[11,"clause_with_len_unchecked_mut",E,E,19,[[["self"],[R[229]],[R[7]]],[R[62]]]],[11,"buffer_size",E,"Current buffer size in multiples of [`LitIdx`].",19,[[["self"]],[R[7]]]],[11,"max_offset",E,"The largest offset supported by the ClauseAlloc",20,[[],["u32"]]],[0,"assess",R[227],"Clause assessment.",N,N],[5,"assess_learned_clause","varisat::clause::assess","Assess the newly learned clause and generate a clause…",N,[[["const",[R[231],"mut"]],["mut",[R[232],"ref"]],[R[231]]],[R[230]]]],[5,"select_tier",E,"Compute the tier for a redundant clause with a given glue…",N,[[[R[7]]],["tier"]]],[5,"bump_clause",E,"Update stats for clauses involved in the conflict.",N,[[["const",[R[231],"mut"]],[R[229]],["mut",[R[232],"mut"]],[R[231]]]]],[0,"db",R[227],R[233],N,N],[3,"ClauseDb",R[302],R[233],N,N],[12,R[79],E,"May contain deleted clauses, see above",21,N],[12,"by_tier",E,"May contain deleted and moved clauses, see above",21,N],[12,R[235],E,"These counts should always be up to date",21,N],[12,R[367],E,"Size of deleted but not collected clauses",21,N],[4,"Tier",E,"Partitions of the clause database.",N,N],[13,"Irred",E,E,22,N],[13,"Core",E,E,22,N],[13,"Mid",E,E,22,N],[13,"Local",E,E,22,N],[5,R[26],E,"Add a long clause to the database.",N,[[["mut",[R[216],"mut"]],[R[216]],["mut",[R[226],"mut"]],[R[230]]],[R[229]]]],[5,"set_clause_tier",E,"Change the tier of a long clause.",N,[[["tier"],[R[229]],["mut",[R[225],"ref"]],["mut",[R[226],"mut"]],[R[226]]]]],[5,R[368],E,"Delete a long clause from the database.",N,[[["mut",[R[216],"mut"]],[R[216]],[R[229]],["mut",[R[226],"mut"]]]]],[5,"try_delete_clause",E,"Delete a long clause from the database unless it is…",N,[[[R[234]],["const",[R[231],"mut"]],[R[229]],["const",[R[234],"const"]]],["bool"]]],[5,"clauses_iter",E,"Iterator over all long clauses.",N,[[["const"]]]],[5,"filter_clauses",E,"Iterate over all and remove some long clauses.",N,[[["mut",[R[216],"mut"]],[R[216]],["mut",[R[226],"mut"]],["f"]]]],[11,"count",E,"Total number of tiers.",22,[[],[R[7]]]],[11,R[13],E,"Cast an index into the corresponding tier.",22,[[[R[7]]],["tier"]]],[11,R[235],E,"The number of long clauses of a given tier.",21,[[["tier"],["self"]],[R[7]]]],[0,"gc",R[227],"Garbage collection of long clauses.",N,N],[5,R[369],"varisat::clause::gc","Perform a garbage collection of long clauses if necessary.",N,[[["trailp"],["const",["trailp","mut"]],["mut",[R[216],"mut"]]]]],[5,"collect_garbage_now",E,"Unconditionally perform a garbage collection of long…",N,[[["trailp"],["const",["trailp","mut"]],["mut",[R[216],"mut"]]]]],[5,"mark_asserting_clauses",E,"Mark asserting clauses to track them through GC.",N,[[["trailp"],["const",["trailp","const"]],["const",[R[231],"mut"]]]]],[0,"header",R[227],"Metadata stored in the header of each long clause.",N,N],[3,R[341],R[303],"Metadata for a clause.",N,N],[12,"data",E,E,23,N],[17,"HEADER_LEN",E,"Length of a [`ClauseHeader`] in multiples of [`LitIdx`]",N,N],[17,"TIER_WORD",E,E,N,N],[17,"TIER_OFFSET",E,E,N,N],[17,"TIER_MASK",E,E,N,N],[17,"DELETED_WORD",E,E,N,N],[17,"DELETED_OFFSET",E,E,N,N],[17,"MARK_WORD",E,E,N,N],[17,"MARK_OFFSET",E,E,N,N],[17,"GLUE_WORD",E,E,N,N],[17,"GLUE_OFFSET",E,E,N,N],[17,"GLUE_MASK",E,E,N,N],[17,"ACTIVE_WORD",E,E,N,N],[17,"ACTIVE_OFFSET",E,E,N,N],[17,"ACTIVITY_WORD",E,E,N,N],[11,"new",E,"Create a new clause header with default entries.",23,[[],[R[230]]]],[11,"len",E,"Length of the clause.",23,[[["self"]],[R[7]]]],[11,"set_len",E,"Set the length of the clause.",23,[[["self"],[R[7]]]]],[11,"deleted",E,"Whether the clause is marked as deleted.",23,[[["self"]],["bool"]]],[11,"set_deleted",E,"Mark the clause as deleted.",23,[[["self"],["bool"]]]],[11,"tier",E,"Current [`Tier`] of the clause.",23,[[["self"]],["tier"]]],[11,"set_tier",E,"Set the current [`Tier`] of the clause.",23,[[["self"],["tier"]]]],[11,R[101],E,"Whether the clause is redundant.",23,[[["self"]],["bool"]]],[11,"mark",E,"Whether the clause is marked.",23,[[["self"]],["bool"]]],[11,"set_mark",E,"Mark or unmark the clause.",23,[[["self"],["bool"]]]],[11,"active",E,"The clause's active flag",23,[[["self"]],["bool"]]],[11,"set_active",E,"Set or reset the clause's active flag.",23,[[["self"],["bool"]]]],[11,"glue",E,"The [glue][crate::glue] level.",23,[[["self"]],[R[7]]]],[11,"set_glue",E,"Update the [glue][crate::glue] level.",23,[[["self"],[R[7]]]]],[11,R[240],E,"Clause [activity][crate::clause::activity].",23,[[["self"]],["f32"]]],[11,"set_activity",E,"Update clause [activity][crate::clause::activity].",23,[[["self"],["f32"]]]],[0,"reduce",R[227],"Clause database reduction.",N,N],[5,"dedup_and_mark_by_tier","varisat::clause::reduce","Remove deleted and duplicate entries from the by_tier…",N,[[["tier"],["mut",[R[225],"ref"]],["mut",[R[226],"mut"]],[R[226]]]]],[5,"reduce_locals",E,"Reduce the number of local tier clauses by deleting half…",N,[[[R[75]],["const",[R[75],"const"]],["const",[R[231],"const"]]]]],[5,"reduce_mids",E,"Reduce the number of mid tier clauses by moving inactive…",N,[[[R[226]],["mut",[R[225],"ref"]],["mut",[R[226],"mut"]]]]],[11,"header",R[227],"The clause's header",17,[[["self"]],[R[230]]]],[11,R[236],E,"Mutable reference to the clause's header",17,[[["self"]],[R[230]]]],[11,"lits",E,"The clause's literals",17,[[["self"]]]],[11,"lits_mut",E,"Mutable slice of the clause's literals",17,[[["self"]]]],[0,R[370],R[214],R[237],N,N],[3,"Context",R[304],R[237],N,N],[12,R[211],E,E,24,N],[12,R[67],E,E,24,N],[12,"binary_clauses",E,E,24,N],[12,"clause_activity",E,E,24,N],[12,"clause_alloc",E,E,24,N],[12,"clause_db",E,E,24,N],[12,"impl_graph",E,E,24,N],[12,R[68],E,E,24,N],[12,"model",E,E,24,N],[12,"proof",E,E,24,N],[12,R[321],E,E,24,N],[12,"solver_config",E,E,24,N],[12,"solver_state",E,E,24,N],[12,"tmp_data",E,E,24,N],[12,"tmp_flags",E,E,24,N],[12,"trail",E,E,24,N],[12,R[131],E,E,24,N],[12,"vsids",E,E,24,N],[12,R[320],E,E,24,N],[5,R[221],E,R[222],N,[[[R[216]],["mut",["vsidsp","mut"]],[R[7]],["mut",[R[216],"mut"]]]]],[5,"config_changed",E,"The solver configuration has changed.",N,[[[R[204]],["const",[R[238],"mut"]],[R[238]],["mut",[R[319],"mut"]]]]],[0,"parts",E,R[372],N,N],[3,R[348],R[305],E,N,N],[3,R[349],E,E,N,N],[3,R[350],E,E,N,N],[3,R[351],E,E,N,N],[3,R[352],E,E,N,N],[3,R[353],E,E,N,N],[3,R[354],E,E,N,N],[3,R[355],E,E,N,N],[3,"ModelP",E,E,N,N],[3,"ProofP",E,E,N,N],[12,"phantom",E,E,25,N],[3,R[356],E,E,N,N],[3,R[357],E,E,N,N],[3,R[358],E,E,N,N],[3,R[373],E,E,N,N],[3,R[359],E,E,N,N],[3,"TrailP",E,E,N,N],[3,R[174],E,E,N,N],[3,"VsidsP",E,E,N,N],[3,R[360],E,E,N,N],[17,"ProofP",E,E,N,N],[0,"decision",R[214],"Decision heuristics.",N,N],[5,"make_decision","varisat::decision","Make a decision and enqueue it.",N,[[["mut",["vsidsp","mut"]],["vsidsp"],["mut",["trailp","mut"]]],["bool"]]],[5,R[249],E,"Make a variable available for decisions.",N,[[["ref",[R[370]]],["vsidsp"],["var"],["mut",["vsidsp","ref"]]]]],[5,"initialize_var",E,"Initialize decision heuristics for a new variable.",N,[[["bool"],["ref",[R[370]]],["vsidsp"],["var"],["mut",["vsidsp","ref"]]]]],[5,"remove_var",E,"Remove a variable from the decision heuristics.",N,[[["ref",[R[370]]],["vsidsp"],["var"],["mut",["vsidsp","ref"]]]]],[0,"vsids",E,R[239],N,N],[3,"Vsids",R[306],R[239],N,N],[12,R[240],E,"The activity of each variable.",26,N],[12,"heap",E,"A binary heap of the variables.",26,N],[12,"position",E,"The position in the binary heap for each variable.",26,N],[12,"bump",E,R[241],26,N],[12,R[242],E,R[243],26,N],[11,R[221],E,R[222],26,[[["self"],[R[7]]]]],[11,R[244],E,R[245],26,[[],["f32"]]],[11,R[246],E,R[247],26,[[["self"],["f32"]]]],[11,"bump",E,"Bump a variable by increasing its activity.",26,[[["self"],["var"]]]],[11,"decay",E,"Decay all variable activities.",26,[[["self"]]]],[11,"rescale",E,R[248],26,[[["self"]]]],[11,"reset",E,"Reset the activity of an unavailable variable to zero.",26,[[["self"],["var"]]]],[11,"make_unavailable",E,"Remove a variable from the heap if present.",26,[[["self"],["var"]]]],[11,R[249],E,"Insert a variable into the heap if not already present.",26,[[["self"],["var"]]]],[11,"sift_up",E,"Move a variable closer to the root until the heap property…",26,[[["self"],[R[7]]]]],[11,"sift_down",E,"Move a variable away from the root until the heap property…",26,[[["self"],[R[7]]]]],[0,"glue",R[214],"Compute glue levels of clauses.",N,N],[5,"compute_glue","varisat::glue","Compute the glue level of a clause.",N,[[["const",[R[231],"mut"]],["mut",[R[232],"ref"]],[R[231]]],[R[7]]]],[0,"load",R[214],"Loading a formula into the solver.",N,N],[5,"load_clause","varisat::load","Adds a clause to the current formula.",N,[[[R[216]],["mut",["vsidsp","mut"]],["mut",[R[216],"mut"]]]]],[0,"model",R[214],R[250],N,N],[3,"Model",R[308],R[250],N,N],[12,R[67],E,R[251],27,N],[5,"reconstruct_global_model",E,E,N,[[[R[75]],["const",[R[75],"const"]],["const",[R[234],"mut"]]]]],[11,R[67],E,R[251],27,[[["self"]]]],[11,R[263],E,"Whether a given global literal is true in the model…",27,[[["self"],["lit"]],["bool"]]],[0,"proof",R[214],R[252],N,N],[3,"Proof",R[255],R[252],N,N],[12,"format",E,E,28,N],[12,"target",E,E,28,N],[12,R[386],E,E,28,N],[12,"map_step",E,E,28,N],[12,R[374],E,R[375],28,N],[12,R[47],E,"How many clauses are currently in the db.",28,N],[4,R[205],E,R[206],N,N],[13,"Varisat",E,E,6,N],[13,"Drat",E,E,6,N],[13,R[207],E,E,6,N],[5,"clause_count_delta",E,"Number of added or removed clauses.",N,[[[R[40]]],["isize"]]],[5,R[26],E,"Call when adding an external clause.",N,[[[R[75]],["mut",[R[253],"mut"]],["const",[R[75],"mut"]]]]],[5,"add_step",E,"Add a step to the proof.",N,[[["bool"],[R[40]],[R[75]],["mut",[R[253],"mut"]],["const",[R[75],"mut"]]]]],[5,"write_varisat_step",E,"Write a step using our native format",N,[[[R[40]],[R[253]],["const",[R[253],"mut"]],["mut",["proofp","ref"]]],[R[21]]]],[5,"flush_proof",E,"Flush buffers used for writing proof steps.",N,[[["mut",[R[253],"mut"]],[R[253]],["mut",["proofp","ref"]]]]],[5,R[254],E,"Stop writing proof steps.",N,[[[R[75]],["mut",[R[253],"mut"]],["const",[R[75],"mut"]]]]],[5,"solve_finished",E,"Called before solve returns to flush buffers and to…",N,[[["mut",[R[253],"mut"]],[R[253]],["mut",["proofp","ref"]]]]],[5,"handle_self_check_result",E,"Handle results of on the fly checking.",N,[[[R[73]],[R[253]],["mut",[R[253],"mut"]],[R[21],[R[73]]],["mut",["proofp","ref"]]]]],[5,"handle_io_errors",E,"Handle io errors during proof writing.",N,[[[R[21]],[R[253]],["mut",[R[253],"mut"]],["mut",["proofp","ref"]]]]],[0,"drat",E,E,N,N],[5,"drat_step","varisat::proof::drat","Prepares a proof step for DRAT writing",N,[[[R[40]]],[R[21]]]],[5,R[471],E,"Writes a proof step in DRAT format",N,[[[R[40]]],[R[21]]]],[5,"write_binary_step",E,"Writes a proof step in binary DRAT format",N,[[[R[40]]],[R[21]]]],[5,R[472],E,"Writes the literals of a clause for a step in a DRAT proof.",N,[[],[R[21]]]],[5,"write_binary_literals",E,"Writes the literals of a clause for a step in a binary…",N,[[],[R[21]]]],[0,"map_step",R[255],R[256],N,N],[3,"MapStep",R[309],R[256],N,N],[12,"lit_buf",E,E,29,N],[12,"hash_buf",E,E,29,N],[12,"unit_buf",E,E,29,N],[11,"map_lits",E,E,29,[[["self"]]]],[11,"map",E,E,29,[[["self"],[R[40]]],[R[40]]]],[11,R[257],R[255],"Start writing proof steps to the given target with the…",28,[[["self"],[R[258]]]]],[11,"begin_checking",E,"Begin checking proof steps.",28,[[["self"]]]],[11,R[328],E,R[329],28,[[["self"],[R[259]]]]],[11,"is_active",E,"Whether proof generation is active.",28,[[["self"]],["bool"]]],[11,"native_format",E,"Are we emitting or checking our native format.",28,[[["self"]],["bool"]]],[11,"clause_hashes_required",E,"Whether clause hashes are required for steps that support…",28,[[["self"]],["bool"]]],[11,"models_in_proof",E,"Whether found models are included in the proof.",28,[[["self"]],["bool"]]],[0,"prop",R[214],"Unit propagation.",N,N],[5,"propagate",R[264],"Propagate enqueued assignments.",N,[[["const",[R[226],"const"]],[R[226]],["const",[R[265],"mut"]]],[[R[21],[R[260]]],[R[260]]]]],[0,R[67],E,"Partial assignment and backtracking.",N,N],[3,R[342],R[310],"Current partial assignment.",N,N],[12,R[67],E,E,30,N],[12,"last_value",E,E,30,N],[3,"Trail",E,"Decision and propagation history.",N,N],[12,"trail",E,"Stack of all propagated and all enqueued assignments",31,N],[12,"queue_head_pos",E,"Next assignment in trail to propagate",31,N],[12,"decisions",E,"Decision levels as trail indices.",31,N],[12,"units_removed",E,"Number of unit clauses removed from the trail.",31,N],[5,"fast_option_eq",E,"This compares two `Option<bool>` values as bytes.…",N,[[[R[57],["bool"]],["bool"]],["bool"]]],[5,"enqueue_assignment",E,"Enqueues the assignment of true to a literal.",N,[[["trailp"],["mut",[R[231],"mut"]],["reason"],["lit"],["mut",["trailp","mut"]]]]],[5,"backtrack",E,"Undo all assignments in decision levels deeper than the…",N,[[["mut",["trailp","mut"]],["vsidsp"],[R[7]],["mut",["vsidsp","mut"]]]]],[5,R[261],E,"Undo all decisions and assumptions.",N,[[["mut",["vsidsp","mut"]],["vsidsp"],["mut",["trailp","mut"]]]]],[5,"restart",E,"Undo all decisions.",N,[[[R[262]],["const",[R[262],"mut"]],["mut",["vsidsp","mut"]]]]],[11,R[221],E,R[222],30,[[["self"],[R[7]]]]],[11,R[67],E,"Current partial assignment as slice.",30,[[["self"]]]],[11,"var_value",E,"Value assigned to a variable.",30,[[["self"],["var"]],[["bool"],[R[57],["bool"]]]]],[11,"last_var_value",E,"Value last assigned to a variable.",30,[[["self"],["var"]],["bool"]]],[11,R[371],E,"Value assigned to a literal.",30,[[["self"],["lit"]],[["bool"],[R[57],["bool"]]]]],[11,R[263],E,E,30,[[["self"],["lit"]],["bool"]]],[11,"lit_is_false",E,E,30,[[["self"],["lit"]],["bool"]]],[11,"lit_is_unk",E,E,30,[[["self"],["lit"]],["bool"]]],[11,"assign_lit",E,E,30,[[["self"],["lit"]]]],[11,"unassign_var",E,E,30,[[["self"],["var"]]]],[11,"set_var",E,"Set the assigned/unassigned value of a variable.",30,[[["self"],["var"],[R[57],["bool"]],["bool"]]]],[11,"queue_head",E,"Return the next assigned literal to propagate.",31,[[["self"]],[[R[57],["lit"]],["lit"]]]],[11,"pop_queue",E,"Return the next assigned literal to propagate and remove…",31,[[["self"]],[[R[57],["lit"]],["lit"]]]],[11,"reset_queue",E,"Re-enqueue all assigned literals.",31,[[["self"]]]],[11,"trail",E,"Assigned literals in assignment order.",31,[[["self"]]]],[11,"clear",E,"Clear the trail.",31,[[["self"]]]],[11,"new_decision_level",E,"Start a new decision level.",31,[[["self"]]]],[11,"current_level",E,"Current decision level.",31,[[["self"]],[R[7]]]],[11,"top_level_assignment_count",E,"The number of assignments at level 0.",31,[[["self"]],[R[7]]]],[11,"fully_propagated",E,"Whether all assignments are processed.",31,[[["self"]],["bool"]]],[0,"binary",R[264],"Propagation of binary clauses.",N,N],[5,"propagate_binary","varisat::prop::binary","Propagate all literals implied by the given literal via…",N,[[["lit"],["const",[R[265],"mut"]],[R[265]],["mut",["trailp","mut"]]],[[R[21],[R[260]]],[R[260]]]]],[0,"graph",R[264],R[266],N,N],[3,"ImplNode",R[311],"Node and incoming edges of the implication graph.",N,N],[12,"reason",E,E,32,N],[12,"level",E,E,32,N],[12,"depth",E,"Position in trail when assigned, `LitIdx::max_value()` is…",32,N],[3,R[343],E,R[266],N,N],[12,"nodes",E,R[269],33,N],[4,"Reason",E,"Assignments that caused a propagation.",N,N],[13,"Unit",E,E,34,N],[13,"Binary",E,E,34,N],[13,"Long",E,E,34,N],[4,R[267],E,"Propagation that resulted in a conflict.",N,N],[13,"Binary",E,E,35,N],[13,"Long",E,E,35,N],[11,"lits",E,"The literals that caused the propagation.",34,[[["const"],["self"]]]],[11,"is_unit",E,"True if a unit clause or assumption and not a propagation.",34,[[["self"]],["bool"]]],[11,"lits",E,"The literals that caused the conflict.",35,[[["const"],["self"]]]],[11,R[221],E,R[222],33,[[["self"],[R[7]]]]],[11,"reason",E,"Get the reason for an assigned variable.",33,[[["self"],["var"]],["reason"]]],[11,"level",E,"Get the decision level of an assigned variable.",33,[[["self"],["var"]],[R[7]]]],[11,"depth",E,"Get the trail depth of an assigned variable.",33,[[["self"],["var"]],[R[7]]]],[11,"update_reason",E,"Updates the reason for an assigned variable.",33,[[["self"],["reason"],["var"]]]],[11,"update_removed_unit",E,"Updates the reason and depth of a unit clause removed from…",33,[[["self"],["var"]]]],[11,"is_removed_unit",E,E,33,[[["self"],["var"]],["bool"]]],[0,"long",R[264],"Propagation of long clauses.",N,N],[5,"propagate_long","varisat::prop::long","Propagate all literals implied by long clauses watched by…",N,[[["mut",[R[225],"mut"]],[R[225]],["mut",[R[216],"mut"]],["lit"]],[[R[21],[R[260]]],[R[260]]]]],[0,"watch",R[264],R[268],N,N],[3,"Watch",R[312],"A watch on a long clause.",N,N],[12,"cref",E,"Clause which has the referring lit in position 0 or 1.",36,N],[12,"blocking",E,"A lit of the clause, different from the referring lit.",36,N],[3,R[344],E,R[268],N,N],[12,"watches",E,R[269],37,N],[12,"enabled",E,"Whether watchlists are present",37,N],[5,"enable_watchlists",E,"Enable and rebuild watchlists.",N,[[["const",[R[226],"const"]],["const",[R[225],"mut"]],[R[226]]]]],[11,R[221],E,R[222],37,[[["self"],[R[7]]]]],[11,"watch_clause",E,"Start watching a clause.",37,[[["self"],[R[229]]]]],[11,"watched_by_mut",E,"Return watches for a given literal.",37,[[["self"],["lit"]],["vec"]]],[11,"add_watch",E,"Make a literal watch a clause.",37,[[["self"],["lit"],["watch"]]]],[11,"enabled",E,"Are watchlists enabled.",37,[[["self"]],["bool"]]],[11,"disable",E,"Clear and disable watchlists.",37,[[["self"]]]],[0,R[321],R[214],R[270],N,N],[3,"Schedule",R[313],R[270],N,N],[12,"conflicts",E,E,38,N],[12,"next_restart",E,E,38,N],[12,"restarts",E,E,38,N],[12,"luby",E,E,38,N],[5,"schedule_step",E,"Perform one step of the schedule.",N,[[["mut",[R[216],"mut"]],["const",[R[238],"mut"]],[R[238]]],["bool"]]],[0,"luby",E,"The reluctant doubling Luby sequence.",N,N],[3,R[345],R[314],"Infinite iterator yielding the Luby sequence.",N,N],[12,U,E,E,39,N],[12,"v",E,E,39,N],[11,"advance",E,"Yields the next number of hte Luby sequence.",39,[[["self"]],["u64"]]],[0,"state",R[214],R[271],N,N],[3,R[346],R[315],R[271],N,N],[12,"sat_state",E,E,40,N],[12,"formula_is_empty",E,E,40,N],[12,"solver_invoked",E,"Whether solve was called at least once.",40,N],[12,"state_is_invalid",E,E,40,N],[12,"solver_error",E,E,40,N],[4,"SatState",E,"Satisfiability state.",N,N],[13,"Unknown",E,E,41,N],[13,"Sat",E,E,41,N],[13,"Unsat",E,E,41,N],[13,"UnsatUnderAssumptions",E,E,41,N],[0,"tmp",R[214],R[379],N,N],[3,"TmpData",R[316],"Temporary data used by various parts of the solver.",N,N],[12,"lits",E,E,42,N],[12,"lits_2",E,E,42,N],[3,"TmpFlags",E,"Temporary data that is automatically resized.",N,N],[12,"flags",E,"A boolean for each literal.",43,N],[11,R[221],E,R[222],43,[[["self"],[R[7]]]]],[0,R[272],R[214],"Simplification using unit clauses.",N,N],[5,"prove_units","varisat::unit_simplify",R[273],N,[[[R[75]],["const",[R[225],"const"]],["const",[R[75],"const"]]],["bool"]]],[5,"resurrect_unit",E,"Put a removed unit back onto the trail.",N,[[["trailp"],["mut",[R[231],"mut"]],["mut",["trailp","mut"]],["lit"]]]],[5,R[272],E,R[273],N,[[["const",[R[262],"mut"]],["mut",["vsidsp","mut"]],[R[262]]]]],[0,R[131],R[214],R[274],N,N],[3,R[169],R[279],R[274],N,N],[12,R[275],E,"Bidirectional mapping from user variables to global…",44,N],[12,R[276],E,"Bidirectional mapping from global variables to user…",44,N],[12,"user_freelist",E,"User variables that were explicitly hidden by the user.",44,N],[12,"global_freelist",E,"Global variables that can be recycled without increasing…",44,N],[12,"solver_freelist",E,"Solver variables that are unused and can be recycled.",44,N],[12,"var_data",E,R[380],44,N],[5,R[275],E,"Maps a user variable into a global variable.",N,[[["mut",[R[75],"mut"]],[R[75]],["mut",[R[253],"mut"]],["var"],["bool"]],["var"]]],[5,R[276],E,"Maps an existing global variable to a solver variable.",N,[[[R[216]],["mut",[R[216],"mut"]],["mut",["vsidsp","mut"]],["var"]],["var"]]],[5,"solver_from_user",E,"Maps a user variable to a solver variable.",N,[[[R[216]],["mut",[R[216],"mut"]],["mut",["vsidsp","mut"]],["var"],["bool"]],["var"]]],[5,"new_user_var",E,"Allocates a currently unused user variable.",N,[[[R[75]],["mut",[R[253],"mut"]],["mut",[R[75],"mut"]]],["var"]]],[5,"solver_from_user_lits",E,"Maps a slice of user lits to solver lits using…",N,[[[R[216]],["mut",[R[216],"mut"]],["mut",["vsidsp","mut"]],["vec"],["bool"]]]],[5,"set_sampling_mode",E,"Changes the sampling mode of a global variable.",N,[[[R[154]],["mut",[R[75],"mut"]],[R[75]],["mut",[R[253],"mut"]],["var"]],[[R[57],["var"]],["var"]]]],[5,R[277],E,"Turns all hidden vars into witness vars and returns them.",N,[[[R[75]],["mut",[R[253],"mut"]],["mut",[R[75],"mut"]]],[["var"],["vec",["var"]]]]],[5,"initialize_solver_var",E,"Initialize a newly allocated solver variable",N,[[["const",[R[75],"mut"]],["mut",["vsidsp","mut"]],["var"],[R[75]]]]],[5,"remove_solver_var",E,"Remove a solver var.",N,[[["vsidsp"],["mut",[R[75],"mut"]],["var"],["mut",["vsidsp","mut"]]]]],[5,"delete_global_if_unused",E,"Delete a global variable if it is unused",N,[[["mut",[R[75],"mut"]],[R[75]],["mut",[R[253],"mut"]],["var"]]]],[0,"data",E,R[278],N,N],[3,"VarData",R[317],R[278],N,N],[12,R[84],E,"The variable's sampling mode.",45,N],[12,"unit",E,"Whether the variable is forced by a unit clause.",45,N],[12,"isolated",E,"True if there are no clauses containing this variable and…",45,N],[12,"assumed",E,"True if this variable is part of the current assumptions.",45,N],[12,"deleted",E,"Whether the global variable was deleted.",45,N],[4,R[170],E,"Variable sampling mode.",N,N],[13,"Sample",E,E,46,N],[13,"Witness",E,E,46,N],[13,"Hide",E,E,46,N],[11,"user_default",E,"Default variable data for a new user variable.",45,[[],[R[323]]]],[0,"var_map",R[279],"Mappings between variable names",N,N],[3,"VarMap",R[318],"A mapping from variables to variables.",N,N],[12,"mapping",E,E,47,N],[3,"VarBiMap",E,"A bidirectional mapping between variables.",N,N],[12,"fwd",E,E,48,N],[12,"bwd",E,E,48,N],[3,R[347],E,"Mutable view of a [`VarBiMap`].",N,N],[12,"fwd",E,E,49,N],[12,"bwd",E,E,49,N],[17,"NO_VAR_IDX",E,E,N,N],[11,"get",E,"Look up a variable in the mapping",47,[[["self"],["var"]],[[R[57],["var"]],["var"]]]],[11,"insert",E,R[281],47,[[["self"],["var"]]]],[11,"remove",E,R[282],47,[[["self"],["var"]]]],[11,"watermark",E,"One above the largest index that is mapped.",47,[[["self"]],[R[7]]]],[11,"fwd",E,"Access the forward mapping.",48,[[["self"]],["varmap"]]],[11,"bwd",E,"Access the backward mapping.",48,[[["self"]],["varmap"]]],[11,"fwd_mut",E,"Mutate the mapping in forward direction.",48,[[["self"]],[R[280]]]],[11,"bwd_mut",E,"Mutate the mapping in backward direction.",48,[[["self"]],[R[280]]]],[11,"insert",E,R[281],49,[[["self"],["var"]]]],[11,"remove",E,R[282],49,[[["self"],["var"]],[[R[57],["var"]],["var"]]]],[11,"solver_watermark",R[279],"Number of allocated solver variables.",44,[[["self"]],[R[7]]]],[11,"global_watermark",E,R[283],44,[[["self"]],[R[7]]]],[11,"user_watermark",E,R[283],44,[[["self"]],[R[7]]]],[11,"user_var_iter",E,"Iterator over all user variables that are in use.",44,[[["self"]]]],[11,"global_var_iter",E,"Iterator over all global variables that are in use.",44,[[["self"]]]],[11,R[275],E,"The user to global mapping.",44,[[["self"]],["varmap"]]],[11,"global_from_user_mut",E,"Mutable user to global mapping.",44,[[["self"]],[R[280]]]],[11,R[276],E,"The global to solver mapping.",44,[[["self"]],["varmap"]]],[11,"solver_from_global_mut",E,"Mutable global to solver mapping.",44,[[["self"]],[R[280]]]],[11,"user_from_global",E,"The global to user mapping.",44,[[["self"]],["varmap"]]],[11,"user_from_global_mut",E,"Mutable global to user mapping.",44,[[["self"]],[R[280]]]],[11,"global_from_solver",E,"The solver to global mapping.",44,[[["self"]],["varmap"]]],[11,"global_from_solver_mut",E,"Mutable  solver to global mapping.",44,[[["self"]],[R[280]]]],[11,"existing_solver_from_user",E,"Get an existing solver var for a user var.",44,[[["self"],["var"]],["var"]]],[11,"existing_user_from_solver",E,"Get an existing user var from a solver var.",44,[[["self"],["var"]],["var"]]],[11,"var_data_global_mut",E,"Mutable reference to the var data for a global variable.",44,[[["self"],["var"]],[R[323]]]],[11,"var_data_solver_mut",E,"Mutable reference to the var data for a solver variable.",44,[[["self"],["var"]],[R[323]]]],[11,"var_data_global",E,"Var data for a global variable.",44,[[["self"],["var"]],[R[323]]]],[11,"solver_var_present",E,"Check if a solver var is mapped to a global var",44,[[["self"],["var"]],["bool"]]],[11,"next_unmapped_global",E,R[284],44,[[["self"]],["var"]]],[11,"next_unmapped_solver",E,R[284],44,[[["self"]],["var"]]],[11,"next_unmapped_user",E,"Get an unmapped user variable.",44,[[["self"]],["var"]]],[0,"dimacs",R[214],"DIMCAS CNF parser and writer.",N,N],[4,R[56],R[285],R[397],N,N],[13,R[398],E,E,50,N],[12,"line",R[286],E,50,N],[12,R[399],E,E,50,N],[13,R[400],R[285],E,50,N],[12,"line",R[286],E,50,N],[12,"index",E,E,50,N],[12,R[401],E,E,50,N],[13,R[402],R[285],E,50,N],[12,"line",R[286],E,50,N],[12,"header",E,E,50,N],[13,R[403],R[285],E,50,N],[12,"line",R[286],E,50,N],[13,"VarCount",R[285],E,50,N],[12,R[6],R[286],E,50,N],[12,R[404],E,E,50,N],[13,R[405],R[285],E,50,N],[12,R[47],R[286],E,50,N],[12,R[406],E,E,50,N],[13,R[407],R[285],E,50,N],[3,R[54],E,R[387],N,N],[12,R[6],E,E,51,N],[12,R[47],E,E,51,N],[3,R[55],E,R[388],N,N],[12,"formula",E,E,52,N],[12,R[389],E,E,52,N],[12,"header",E,E,52,N],[12,R[390],E,E,52,N],[12,R[47],E,E,52,N],[12,R[391],E,E,52,N],[12,R[392],E,E,52,N],[12,"in_lit",E,E,52,N],[12,R[393],E,E,52,N],[12,R[394],E,E,52,N],[12,R[395],E,E,52,N],[12,"error",E,E,52,N],[12,R[396],E,E,52,N],[5,R[408],E,R[409],N,[[[R[287]],[R[52]]],[["error"],[R[21],["error"]]]]],[5,R[410],E,R[411],N,[[[R[287]],["impl intoiterator<item = impl intoiterator<item = impl borrow<lit>>>"]],[["error"],[R[21],["error"]]]]],[5,R[412],E,R[413],N,[[[R[287]],[R[29]]],[["error"],[R[21],["error"]]]]],[0,R[386],R[214],R[361],N,N],[4,R[89],R[288],R[90],N,N],[13,"UserVar",E,R[91],53,N],[12,"var",R[289],E,53,N],[12,R[59],E,E,53,N],[13,R[66],R[288],R[93],53,N],[12,"id",R[289],E,53,N],[12,R[62],E,E,53,N],[13,R[95],R[288],R[96],53,N],[12,"id",R[289],E,53,N],[12,R[97],E,E,53,N],[12,R[62],E,E,53,N],[13,R[98],R[288],R[99],53,N],[12,"id",R[289],E,53,N],[12,R[62],E,E,53,N],[13,R[175],R[288],R[100],53,N],[12,"id",R[289],E,53,N],[12,R[101],E,E,53,N],[12,R[62],E,E,53,N],[12,R[63],E,E,53,N],[13,R[102],R[288],R[103],53,N],[12,"id",R[289],E,53,N],[12,R[62],E,E,53,N],[13,R[104],R[288],R[105],53,N],[12,"id",R[289],E,53,N],[12,R[64],E,E,53,N],[12,R[62],E,E,53,N],[12,R[63],E,E,53,N],[13,R[106],R[288],R[107],53,N],[12,"id",R[289],E,53,N],[12,R[64],E,E,53,N],[12,R[62],E,E,53,N],[12,"pivot",E,E,53,N],[12,R[63],E,E,53,N],[13,R[108],R[288],R[109],53,N],[12,"id",R[289],E,53,N],[12,R[62],E,E,53,N],[13,"Model",R[288],R[110],53,N],[12,R[67],R[289],E,53,N],[13,R[111],R[288],R[112],53,N],[12,R[68],R[289],E,53,N],[13,R[69],R[288],R[113],53,N],[12,R[70],R[289],E,53,N],[12,R[63],E,E,53,N],[3,"Checker",R[288],R[120],N,N],[12,"ctx",E,E,54,N],[3,R[87],E,R[88],N,N],[12,"0",E,E,55,N],[4,R[158],E,R[362],N,N],[13,R[363],E,E,56,N],[12,"step",R[290],E,56,N],[13,"IoError",R[288],E,56,N],[12,"step",R[290],E,56,N],[12,"cause",E,E,56,N],[13,R[364],R[288],E,56,N],[12,"step",R[290],E,56,N],[12,"cause",E,E,56,N],[13,R[365],R[288],E,56,N],[12,"step",R[290],E,56,N],[12,"msg",E,E,56,N],[12,R[366],E,E,56,N],[13,R[291],R[288],E,56,N],[12,"cause",R[290],E,56,N],[13,R[292],R[288],E,56,N],[8,R[132],E,R[133],N,N],[10,R[116],E,E,57,[[["self"],[R[117]],[R[119]]],[[R[21],["error"]],["error"]]]],[8,R[134],E,R[135],N,N],[10,R[116],E,R[136],58,[[["self"],[R[130]]],[[R[21],["error"]],["error"]]]],[4,R[123],E,R[124],N,N],[13,R[125],E,E,59,N],[12,"var",R[293],E,59,N],[13,R[126],R[288],E,59,N],[12,"var",R[293],E,59,N],[13,"HideVar",R[288],E,59,N],[12,"var",R[293],E,59,N],[13,R[129],R[288],E,59,N],[12,"var",R[293],E,59,N],[13,R[66],R[288],E,59,N],[12,R[62],R[293],E,59,N],[13,"Unsat",R[288],E,59,N],[13,"Model",E,E,59,N],[12,R[67],R[293],E,59,N],[13,"Assume",R[288],E,59,N],[12,R[68],R[293],E,59,N],[13,R[69],R[288],E,59,N],[12,R[70],R[293],E,59,N],[11,"into",R[214],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,R[141],E,E,0,[[]]],[11,R[140],E,E,0,[[]]],[11,"into",R[294],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[307],E,E,2,[[],["i"]]],[11,R[18],E,E,2,[[[U]],[R[21]]]],[11,R[19],E,E,2,[[],[R[21]]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[42]]]],[11,R[141],E,E,2,[[]]],[11,R[140],E,E,2,[[]]],[11,R[23],R[214],E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[25],E,E,4,[[["self"]],["string"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[18],E,E,4,[[[U]],[R[21]]]],[11,R[19],E,E,4,[[],[R[21]]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[42]]]],[11,R[141],E,E,4,[[]]],[11,R[140],E,E,4,[[]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[[T],["self"]]]],[11,"into",E,E,5,[[],[U]]],[11,R[25],E,E,5,[[["self"]],["string"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[18],E,E,5,[[[U]],[R[21]]]],[11,R[19],E,E,5,[[],[R[21]]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[42]]]],[11,R[141],E,E,5,[[]]],[11,R[140],E,E,5,[[]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[24],E,E,6,[[[T],["self"]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[18],E,E,6,[[[U]],[R[21]]]],[11,R[19],E,E,6,[[],[R[21]]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[41],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[42]]]],[11,R[141],E,E,6,[[]]],[11,R[140],E,E,6,[[]]],[11,"into",R[295],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[18],E,E,7,[[[U]],[R[21]]]],[11,R[19],E,E,7,[[],[R[21]]]],[11,R[20],E,E,7,[[["self"]],[T]]],[11,R[41],E,E,7,[[["self"]],[T]]],[11,R[22],E,E,7,[[["self"]],[R[42]]]],[11,R[141],E,E,7,[[]]],[11,R[140],E,E,7,[[]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[18],E,E,8,[[[U]],[R[21]]]],[11,R[19],E,E,8,[[],[R[21]]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[41],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[R[42]]]],[11,R[141],E,E,8,[[]]],[11,R[140],E,E,8,[[]]],[11,"into",R[208],E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[18],E,E,9,[[[U]],[R[21]]]],[11,R[19],E,E,9,[[],[R[21]]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[41],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[R[42]]]],[11,R[141],E,E,9,[[]]],[11,R[140],E,E,9,[[]]],[11,"into",E,E,10,[[],[U]]],[11,R[25],E,E,10,[[["self"]],["string"]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[18],E,E,10,[[[U]],[R[21]]]],[11,R[19],E,E,10,[[],[R[21]]]],[11,R[20],E,E,10,[[["self"]],[T]]],[11,R[41],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[R[42]]]],[11,R[141],E,E,10,[[]]],[11,R[140],E,E,10,[[]]],[11,"as_fail",E,E,10,[[["self"]],["fail"]]],[11,"into",R[296],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[18],E,E,11,[[[U]],[R[21]]]],[11,R[19],E,E,11,[[],[R[21]]]],[11,R[20],E,E,11,[[["self"]],[T]]],[11,R[41],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[R[42]]]],[11,R[141],E,E,11,[[]]],[11,R[140],E,E,11,[[]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[18],E,E,12,[[[U]],[R[21]]]],[11,R[19],E,E,12,[[],[R[21]]]],[11,R[20],E,E,12,[[["self"]],[T]]],[11,R[41],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[R[42]]]],[11,R[141],E,E,12,[[]]],[11,R[140],E,E,12,[[]]],[11,"into",R[297],E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[18],E,E,13,[[[U]],[R[21]]]],[11,R[19],E,E,13,[[],[R[21]]]],[11,R[20],E,E,13,[[["self"]],[T]]],[11,R[41],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[R[42]]]],[11,R[141],E,E,13,[[]]],[11,R[140],E,E,13,[[]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[18],E,E,14,[[[U]],[R[21]]]],[11,R[19],E,E,14,[[],[R[21]]]],[11,R[20],E,E,14,[[["self"]],[T]]],[11,R[41],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[R[42]]]],[11,R[141],E,E,14,[[]]],[11,R[140],E,E,14,[[]]],[11,"into",R[298],E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[18],E,E,15,[[[U]],[R[21]]]],[11,R[19],E,E,15,[[],[R[21]]]],[11,R[20],E,E,15,[[["self"]],[T]]],[11,R[41],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[R[42]]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,"into",R[299],E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[18],E,E,16,[[[U]],[R[21]]]],[11,R[19],E,E,16,[[],[R[21]]]],[11,R[20],E,E,16,[[["self"]],[T]]],[11,R[41],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[R[42]]]],[11,R[141],E,E,16,[[]]],[11,R[140],E,E,16,[[]]],[11,R[20],R[227],E,17,[[["self"]],[T]]],[11,R[41],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[R[42]]]],[11,R[141],E,E,17,[[]]],[11,R[140],E,E,17,[[]]],[11,"into",R[300],E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[18],E,E,18,[[[U]],[R[21]]]],[11,R[19],E,E,18,[[],[R[21]]]],[11,R[20],E,E,18,[[["self"]],[T]]],[11,R[41],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[R[42]]]],[11,R[141],E,E,18,[[]]],[11,R[140],E,E,18,[[]]],[11,"into",R[301],E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[18],E,E,19,[[[U]],[R[21]]]],[11,R[19],E,E,19,[[],[R[21]]]],[11,R[20],E,E,19,[[["self"]],[T]]],[11,R[41],E,E,19,[[["self"]],[T]]],[11,R[22],E,E,19,[[["self"]],[R[42]]]],[11,R[141],E,E,19,[[]]],[11,R[140],E,E,19,[[]]],[11,R[23],E,E,20,[[["self"]],[T]]],[11,R[24],E,E,20,[[[T],["self"]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[18],E,E,20,[[[U]],[R[21]]]],[11,R[19],E,E,20,[[],[R[21]]]],[11,R[20],E,E,20,[[["self"]],[T]]],[11,R[41],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[R[42]]]],[11,R[141],E,E,20,[[]]],[11,R[140],E,E,20,[[]]],[11,"into",R[302],E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[18],E,E,21,[[[U]],[R[21]]]],[11,R[19],E,E,21,[[],[R[21]]]],[11,R[20],E,E,21,[[["self"]],[T]]],[11,R[41],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[R[42]]]],[11,R[141],E,E,21,[[]]],[11,R[140],E,E,21,[[]]],[11,R[23],E,E,22,[[["self"]],[T]]],[11,R[24],E,E,22,[[[T],["self"]]]],[11,"into",E,E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[18],E,E,22,[[[U]],[R[21]]]],[11,R[19],E,E,22,[[],[R[21]]]],[11,R[20],E,E,22,[[["self"]],[T]]],[11,R[41],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[R[42]]]],[11,R[141],E,E,22,[[]]],[11,R[140],E,E,22,[[]]],[11,R[23],R[303],E,23,[[["self"]],[T]]],[11,R[24],E,E,23,[[[T],["self"]]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[18],E,E,23,[[[U]],[R[21]]]],[11,R[19],E,E,23,[[],[R[21]]]],[11,R[20],E,E,23,[[["self"]],[T]]],[11,R[41],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[R[42]]]],[11,R[141],E,E,23,[[]]],[11,R[140],E,E,23,[[]]],[11,"into",R[304],E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[18],E,E,24,[[[U]],[R[21]]]],[11,R[19],E,E,24,[[],[R[21]]]],[11,R[20],E,E,24,[[["self"]],[T]]],[11,R[41],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[R[42]]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,"into",R[305],E,60,[[],[U]]],[11,"from",E,E,60,[[[T]],[T]]],[11,R[18],E,E,60,[[[U]],[R[21]]]],[11,R[19],E,E,60,[[],[R[21]]]],[11,R[20],E,E,60,[[["self"]],[T]]],[11,R[41],E,E,60,[[["self"]],[T]]],[11,R[22],E,E,60,[[["self"]],[R[42]]]],[11,R[141],E,E,60,[[]]],[11,R[140],E,E,60,[[]]],[11,"into",E,E,61,[[],[U]]],[11,"from",E,E,61,[[[T]],[T]]],[11,R[18],E,E,61,[[[U]],[R[21]]]],[11,R[19],E,E,61,[[],[R[21]]]],[11,R[20],E,E,61,[[["self"]],[T]]],[11,R[41],E,E,61,[[["self"]],[T]]],[11,R[22],E,E,61,[[["self"]],[R[42]]]],[11,R[141],E,E,61,[[]]],[11,R[140],E,E,61,[[]]],[11,"into",E,E,62,[[],[U]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[18],E,E,62,[[[U]],[R[21]]]],[11,R[19],E,E,62,[[],[R[21]]]],[11,R[20],E,E,62,[[["self"]],[T]]],[11,R[41],E,E,62,[[["self"]],[T]]],[11,R[22],E,E,62,[[["self"]],[R[42]]]],[11,R[141],E,E,62,[[]]],[11,R[140],E,E,62,[[]]],[11,"into",E,E,63,[[],[U]]],[11,"from",E,E,63,[[[T]],[T]]],[11,R[18],E,E,63,[[[U]],[R[21]]]],[11,R[19],E,E,63,[[],[R[21]]]],[11,R[20],E,E,63,[[["self"]],[T]]],[11,R[41],E,E,63,[[["self"]],[T]]],[11,R[22],E,E,63,[[["self"]],[R[42]]]],[11,R[141],E,E,63,[[]]],[11,R[140],E,E,63,[[]]],[11,"into",E,E,64,[[],[U]]],[11,"from",E,E,64,[[[T]],[T]]],[11,R[18],E,E,64,[[[U]],[R[21]]]],[11,R[19],E,E,64,[[],[R[21]]]],[11,R[20],E,E,64,[[["self"]],[T]]],[11,R[41],E,E,64,[[["self"]],[T]]],[11,R[22],E,E,64,[[["self"]],[R[42]]]],[11,R[141],E,E,64,[[]]],[11,R[140],E,E,64,[[]]],[11,"into",E,E,65,[[],[U]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[18],E,E,65,[[[U]],[R[21]]]],[11,R[19],E,E,65,[[],[R[21]]]],[11,R[20],E,E,65,[[["self"]],[T]]],[11,R[41],E,E,65,[[["self"]],[T]]],[11,R[22],E,E,65,[[["self"]],[R[42]]]],[11,R[141],E,E,65,[[]]],[11,R[140],E,E,65,[[]]],[11,"into",E,E,66,[[],[U]]],[11,"from",E,E,66,[[[T]],[T]]],[11,R[18],E,E,66,[[[U]],[R[21]]]],[11,R[19],E,E,66,[[],[R[21]]]],[11,R[20],E,E,66,[[["self"]],[T]]],[11,R[41],E,E,66,[[["self"]],[T]]],[11,R[22],E,E,66,[[["self"]],[R[42]]]],[11,R[141],E,E,66,[[]]],[11,R[140],E,E,66,[[]]],[11,"into",E,E,67,[[],[U]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[18],E,E,67,[[[U]],[R[21]]]],[11,R[19],E,E,67,[[],[R[21]]]],[11,R[20],E,E,67,[[["self"]],[T]]],[11,R[41],E,E,67,[[["self"]],[T]]],[11,R[22],E,E,67,[[["self"]],[R[42]]]],[11,R[141],E,E,67,[[]]],[11,R[140],E,E,67,[[]]],[11,"into",E,E,68,[[],[U]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[18],E,E,68,[[[U]],[R[21]]]],[11,R[19],E,E,68,[[],[R[21]]]],[11,R[20],E,E,68,[[["self"]],[T]]],[11,R[41],E,E,68,[[["self"]],[T]]],[11,R[22],E,E,68,[[["self"]],[R[42]]]],[11,R[141],E,E,68,[[]]],[11,R[140],E,E,68,[[]]],[11,"into",E,E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[18],E,E,25,[[[U]],[R[21]]]],[11,R[19],E,E,25,[[],[R[21]]]],[11,R[20],E,E,25,[[["self"]],[T]]],[11,R[41],E,E,25,[[["self"]],[T]]],[11,R[22],E,E,25,[[["self"]],[R[42]]]],[11,R[141],E,E,25,[[]]],[11,R[140],E,E,25,[[]]],[11,"into",E,E,69,[[],[U]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[18],E,E,69,[[[U]],[R[21]]]],[11,R[19],E,E,69,[[],[R[21]]]],[11,R[20],E,E,69,[[["self"]],[T]]],[11,R[41],E,E,69,[[["self"]],[T]]],[11,R[22],E,E,69,[[["self"]],[R[42]]]],[11,R[141],E,E,69,[[]]],[11,R[140],E,E,69,[[]]],[11,"into",E,E,70,[[],[U]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[18],E,E,70,[[[U]],[R[21]]]],[11,R[19],E,E,70,[[],[R[21]]]],[11,R[20],E,E,70,[[["self"]],[T]]],[11,R[41],E,E,70,[[["self"]],[T]]],[11,R[22],E,E,70,[[["self"]],[R[42]]]],[11,R[141],E,E,70,[[]]],[11,R[140],E,E,70,[[]]],[11,"into",E,E,71,[[],[U]]],[11,"from",E,E,71,[[[T]],[T]]],[11,R[18],E,E,71,[[[U]],[R[21]]]],[11,R[19],E,E,71,[[],[R[21]]]],[11,R[20],E,E,71,[[["self"]],[T]]],[11,R[41],E,E,71,[[["self"]],[T]]],[11,R[22],E,E,71,[[["self"]],[R[42]]]],[11,R[141],E,E,71,[[]]],[11,R[140],E,E,71,[[]]],[11,"into",E,E,72,[[],[U]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[18],E,E,72,[[[U]],[R[21]]]],[11,R[19],E,E,72,[[],[R[21]]]],[11,R[20],E,E,72,[[["self"]],[T]]],[11,R[41],E,E,72,[[["self"]],[T]]],[11,R[22],E,E,72,[[["self"]],[R[42]]]],[11,R[141],E,E,72,[[]]],[11,R[140],E,E,72,[[]]],[11,"into",E,E,73,[[],[U]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[18],E,E,73,[[[U]],[R[21]]]],[11,R[19],E,E,73,[[],[R[21]]]],[11,R[20],E,E,73,[[["self"]],[T]]],[11,R[41],E,E,73,[[["self"]],[T]]],[11,R[22],E,E,73,[[["self"]],[R[42]]]],[11,R[141],E,E,73,[[]]],[11,R[140],E,E,73,[[]]],[11,"into",E,E,74,[[],[U]]],[11,"from",E,E,74,[[[T]],[T]]],[11,R[18],E,E,74,[[[U]],[R[21]]]],[11,R[19],E,E,74,[[],[R[21]]]],[11,R[20],E,E,74,[[["self"]],[T]]],[11,R[41],E,E,74,[[["self"]],[T]]],[11,R[22],E,E,74,[[["self"]],[R[42]]]],[11,R[141],E,E,74,[[]]],[11,R[140],E,E,74,[[]]],[11,"into",E,E,75,[[],[U]]],[11,"from",E,E,75,[[[T]],[T]]],[11,R[18],E,E,75,[[[U]],[R[21]]]],[11,R[19],E,E,75,[[],[R[21]]]],[11,R[20],E,E,75,[[["self"]],[T]]],[11,R[41],E,E,75,[[["self"]],[T]]],[11,R[22],E,E,75,[[["self"]],[R[42]]]],[11,R[141],E,E,75,[[]]],[11,R[140],E,E,75,[[]]],[11,"into",E,E,76,[[],[U]]],[11,"from",E,E,76,[[[T]],[T]]],[11,R[18],E,E,76,[[[U]],[R[21]]]],[11,R[19],E,E,76,[[],[R[21]]]],[11,R[20],E,E,76,[[["self"]],[T]]],[11,R[41],E,E,76,[[["self"]],[T]]],[11,R[22],E,E,76,[[["self"]],[R[42]]]],[11,R[141],E,E,76,[[]]],[11,R[140],E,E,76,[[]]],[11,"into",E,E,77,[[],[U]]],[11,"from",E,E,77,[[[T]],[T]]],[11,R[18],E,E,77,[[[U]],[R[21]]]],[11,R[19],E,E,77,[[],[R[21]]]],[11,R[20],E,E,77,[[["self"]],[T]]],[11,R[41],E,E,77,[[["self"]],[T]]],[11,R[22],E,E,77,[[["self"]],[R[42]]]],[11,R[141],E,E,77,[[]]],[11,R[140],E,E,77,[[]]],[11,"into",R[306],E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[307],E,E,26,[[],["i"]]],[11,R[18],E,E,26,[[[U]],[R[21]]]],[11,R[19],E,E,26,[[],[R[21]]]],[11,R[20],E,E,26,[[["self"]],[T]]],[11,R[41],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[R[42]]]],[11,R[141],E,E,26,[[]]],[11,R[140],E,E,26,[[]]],[11,"into",R[308],E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[18],E,E,27,[[[U]],[R[21]]]],[11,R[19],E,E,27,[[],[R[21]]]],[11,R[20],E,E,27,[[["self"]],[T]]],[11,R[41],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[R[42]]]],[11,R[141],E,E,27,[[]]],[11,R[140],E,E,27,[[]]],[11,"into",R[255],E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[18],E,E,28,[[[U]],[R[21]]]],[11,R[19],E,E,28,[[],[R[21]]]],[11,R[20],E,E,28,[[["self"]],[T]]],[11,R[41],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[R[42]]]],[11,R[141],E,E,28,[[]]],[11,R[140],E,E,28,[[]]],[11,"into",R[309],E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[18],E,E,29,[[[U]],[R[21]]]],[11,R[19],E,E,29,[[],[R[21]]]],[11,R[20],E,E,29,[[["self"]],[T]]],[11,R[41],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[R[42]]]],[11,R[141],E,E,29,[[]]],[11,R[140],E,E,29,[[]]],[11,"into",R[310],E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[18],E,E,30,[[[U]],[R[21]]]],[11,R[19],E,E,30,[[],[R[21]]]],[11,R[20],E,E,30,[[["self"]],[T]]],[11,R[41],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"]],[R[42]]]],[11,R[141],E,E,30,[[]]],[11,R[140],E,E,30,[[]]],[11,"into",E,E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[18],E,E,31,[[[U]],[R[21]]]],[11,R[19],E,E,31,[[],[R[21]]]],[11,R[20],E,E,31,[[["self"]],[T]]],[11,R[41],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[R[42]]]],[11,R[141],E,E,31,[[]]],[11,R[140],E,E,31,[[]]],[11,R[23],R[311],E,32,[[["self"]],[T]]],[11,R[24],E,E,32,[[[T],["self"]]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[18],E,E,32,[[[U]],[R[21]]]],[11,R[19],E,E,32,[[],[R[21]]]],[11,R[20],E,E,32,[[["self"]],[T]]],[11,R[41],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[R[42]]]],[11,R[141],E,E,32,[[]]],[11,R[140],E,E,32,[[]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[18],E,E,33,[[[U]],[R[21]]]],[11,R[19],E,E,33,[[],[R[21]]]],[11,R[20],E,E,33,[[["self"]],[T]]],[11,R[41],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"]],[R[42]]]],[11,R[141],E,E,33,[[]]],[11,R[140],E,E,33,[[]]],[11,R[23],E,E,34,[[["self"]],[T]]],[11,R[24],E,E,34,[[[T],["self"]]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[18],E,E,34,[[[U]],[R[21]]]],[11,R[19],E,E,34,[[],[R[21]]]],[11,R[20],E,E,34,[[["self"]],[T]]],[11,R[41],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"]],[R[42]]]],[11,R[141],E,E,34,[[]]],[11,R[140],E,E,34,[[]]],[11,R[23],E,E,35,[[["self"]],[T]]],[11,R[24],E,E,35,[[[T],["self"]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[18],E,E,35,[[[U]],[R[21]]]],[11,R[19],E,E,35,[[],[R[21]]]],[11,R[20],E,E,35,[[["self"]],[T]]],[11,R[41],E,E,35,[[["self"]],[T]]],[11,R[22],E,E,35,[[["self"]],[R[42]]]],[11,R[141],E,E,35,[[]]],[11,R[140],E,E,35,[[]]],[11,R[23],R[312],E,36,[[["self"]],[T]]],[11,R[24],E,E,36,[[[T],["self"]]]],[11,"into",E,E,36,[[],[U]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[18],E,E,36,[[[U]],[R[21]]]],[11,R[19],E,E,36,[[],[R[21]]]],[11,R[20],E,E,36,[[["self"]],[T]]],[11,R[41],E,E,36,[[["self"]],[T]]],[11,R[22],E,E,36,[[["self"]],[R[42]]]],[11,R[141],E,E,36,[[]]],[11,R[140],E,E,36,[[]]],[11,"into",E,E,37,[[],[U]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[18],E,E,37,[[[U]],[R[21]]]],[11,R[19],E,E,37,[[],[R[21]]]],[11,R[20],E,E,37,[[["self"]],[T]]],[11,R[41],E,E,37,[[["self"]],[T]]],[11,R[22],E,E,37,[[["self"]],[R[42]]]],[11,R[141],E,E,37,[[]]],[11,R[140],E,E,37,[[]]],[11,"into",R[313],E,38,[[],[U]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[18],E,E,38,[[[U]],[R[21]]]],[11,R[19],E,E,38,[[],[R[21]]]],[11,R[20],E,E,38,[[["self"]],[T]]],[11,R[41],E,E,38,[[["self"]],[T]]],[11,R[22],E,E,38,[[["self"]],[R[42]]]],[11,R[141],E,E,38,[[]]],[11,R[140],E,E,38,[[]]],[11,"into",R[314],E,39,[[],[U]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[18],E,E,39,[[[U]],[R[21]]]],[11,R[19],E,E,39,[[],[R[21]]]],[11,R[20],E,E,39,[[["self"]],[T]]],[11,R[41],E,E,39,[[["self"]],[T]]],[11,R[22],E,E,39,[[["self"]],[R[42]]]],[11,R[141],E,E,39,[[]]],[11,R[140],E,E,39,[[]]],[11,"into",R[315],E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[18],E,E,40,[[[U]],[R[21]]]],[11,R[19],E,E,40,[[],[R[21]]]],[11,R[20],E,E,40,[[["self"]],[T]]],[11,R[41],E,E,40,[[["self"]],[T]]],[11,R[22],E,E,40,[[["self"]],[R[42]]]],[11,R[141],E,E,40,[[]]],[11,R[140],E,E,40,[[]]],[11,R[23],E,E,41,[[["self"]],[T]]],[11,R[24],E,E,41,[[[T],["self"]]]],[11,"into",E,E,41,[[],[U]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[18],E,E,41,[[[U]],[R[21]]]],[11,R[19],E,E,41,[[],[R[21]]]],[11,R[20],E,E,41,[[["self"]],[T]]],[11,R[41],E,E,41,[[["self"]],[T]]],[11,R[22],E,E,41,[[["self"]],[R[42]]]],[11,R[141],E,E,41,[[]]],[11,R[140],E,E,41,[[]]],[11,"into",R[316],E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[18],E,E,42,[[[U]],[R[21]]]],[11,R[19],E,E,42,[[],[R[21]]]],[11,R[20],E,E,42,[[["self"]],[T]]],[11,R[41],E,E,42,[[["self"]],[T]]],[11,R[22],E,E,42,[[["self"]],[R[42]]]],[11,R[141],E,E,42,[[]]],[11,R[140],E,E,42,[[]]],[11,"into",E,E,43,[[],[U]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[18],E,E,43,[[[U]],[R[21]]]],[11,R[19],E,E,43,[[],[R[21]]]],[11,R[20],E,E,43,[[["self"]],[T]]],[11,R[41],E,E,43,[[["self"]],[T]]],[11,R[22],E,E,43,[[["self"]],[R[42]]]],[11,R[141],E,E,43,[[]]],[11,R[140],E,E,43,[[]]],[11,"into",R[279],E,44,[[],[U]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[18],E,E,44,[[[U]],[R[21]]]],[11,R[19],E,E,44,[[],[R[21]]]],[11,R[20],E,E,44,[[["self"]],[T]]],[11,R[41],E,E,44,[[["self"]],[T]]],[11,R[22],E,E,44,[[["self"]],[R[42]]]],[11,R[141],E,E,44,[[]]],[11,R[140],E,E,44,[[]]],[11,R[23],R[317],E,45,[[["self"]],[T]]],[11,R[24],E,E,45,[[[T],["self"]]]],[11,"into",E,E,45,[[],[U]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[18],E,E,45,[[[U]],[R[21]]]],[11,R[19],E,E,45,[[],[R[21]]]],[11,R[20],E,E,45,[[["self"]],[T]]],[11,R[41],E,E,45,[[["self"]],[T]]],[11,R[22],E,E,45,[[["self"]],[R[42]]]],[11,R[141],E,E,45,[[]]],[11,R[140],E,E,45,[[]]],[11,R[23],E,E,46,[[["self"]],[T]]],[11,R[24],E,E,46,[[[T],["self"]]]],[11,"into",E,E,46,[[],[U]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[18],E,E,46,[[[U]],[R[21]]]],[11,R[19],E,E,46,[[],[R[21]]]],[11,R[20],E,E,46,[[["self"]],[T]]],[11,R[41],E,E,46,[[["self"]],[T]]],[11,R[22],E,E,46,[[["self"]],[R[42]]]],[11,R[141],E,E,46,[[]]],[11,R[140],E,E,46,[[]]],[11,"into",R[318],E,47,[[],[U]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[18],E,E,47,[[[U]],[R[21]]]],[11,R[19],E,E,47,[[],[R[21]]]],[11,R[20],E,E,47,[[["self"]],[T]]],[11,R[41],E,E,47,[[["self"]],[T]]],[11,R[22],E,E,47,[[["self"]],[R[42]]]],[11,R[141],E,E,47,[[]]],[11,R[140],E,E,47,[[]]],[11,"into",E,E,48,[[],[U]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[18],E,E,48,[[[U]],[R[21]]]],[11,R[19],E,E,48,[[],[R[21]]]],[11,R[20],E,E,48,[[["self"]],[T]]],[11,R[41],E,E,48,[[["self"]],[T]]],[11,R[22],E,E,48,[[["self"]],[R[42]]]],[11,R[141],E,E,48,[[]]],[11,R[140],E,E,48,[[]]],[11,"into",E,E,49,[[],[U]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[18],E,E,49,[[[U]],[R[21]]]],[11,R[19],E,E,49,[[],[R[21]]]],[11,R[20],E,E,49,[[["self"]],[T]]],[11,R[41],E,E,49,[[["self"]],[T]]],[11,R[22],E,E,49,[[["self"]],[R[42]]]],[11,R[141],E,E,49,[[]]],[11,R[140],E,E,49,[[]]],[11,"into",R[285],E,50,[[],[U]]],[11,R[25],E,E,50,[[["self"]],["string"]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[18],E,E,50,[[[U]],[R[21]]]],[11,R[19],E,E,50,[[],[R[21]]]],[11,R[20],E,E,50,[[["self"]],[T]]],[11,R[41],E,E,50,[[["self"]],[T]]],[11,R[22],E,E,50,[[["self"]],[R[42]]]],[11,R[141],E,E,50,[[]]],[11,R[140],E,E,50,[[]]],[11,"as_fail",E,E,50,[[["self"]],["fail"]]],[11,R[23],E,E,51,[[["self"]],[T]]],[11,R[24],E,E,51,[[[T],["self"]]]],[11,"into",E,E,51,[[],[U]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[18],E,E,51,[[[U]],[R[21]]]],[11,R[19],E,E,51,[[],[R[21]]]],[11,R[20],E,E,51,[[["self"]],[T]]],[11,R[41],E,E,51,[[["self"]],[T]]],[11,R[22],E,E,51,[[["self"]],[R[42]]]],[11,R[141],E,E,51,[[]]],[11,R[140],E,E,51,[[]]],[11,"into",E,E,52,[[],[U]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[18],E,E,52,[[[U]],[R[21]]]],[11,R[19],E,E,52,[[],[R[21]]]],[11,R[20],E,E,52,[[["self"]],[T]]],[11,R[41],E,E,52,[[["self"]],[T]]],[11,R[22],E,E,52,[[["self"]],[R[42]]]],[11,R[141],E,E,52,[[]]],[11,R[140],E,E,52,[[]]],[11,"into",R[288],E,53,[[],[U]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[18],E,E,53,[[[U]],[R[21]]]],[11,R[19],E,E,53,[[],[R[21]]]],[11,R[20],E,E,53,[[["self"]],[T]]],[11,R[41],E,E,53,[[["self"]],[T]]],[11,R[22],E,E,53,[[["self"]],[R[42]]]],[11,R[141],E,E,53,[[]]],[11,R[140],E,E,53,[[]]],[11,"into",E,E,54,[[],[U]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[18],E,E,54,[[[U]],[R[21]]]],[11,R[19],E,E,54,[[],[R[21]]]],[11,R[20],E,E,54,[[["self"]],[T]]],[11,R[41],E,E,54,[[["self"]],[T]]],[11,R[22],E,E,54,[[["self"]],[R[42]]]],[11,R[141],E,E,54,[[]]],[11,R[140],E,E,54,[[]]],[11,R[23],E,E,55,[[["self"]],[T]]],[11,R[24],E,E,55,[[[T],["self"]]]],[11,"into",E,E,55,[[],[U]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[18],E,E,55,[[[U]],[R[21]]]],[11,R[19],E,E,55,[[],[R[21]]]],[11,R[20],E,E,55,[[["self"]],[T]]],[11,R[41],E,E,55,[[["self"]],[T]]],[11,R[22],E,E,55,[[["self"]],[R[42]]]],[11,R[141],E,E,55,[[]]],[11,R[140],E,E,55,[[]]],[11,"into",E,E,56,[[],[U]]],[11,R[25],E,E,56,[[["self"]],["string"]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[18],E,E,56,[[[U]],[R[21]]]],[11,R[19],E,E,56,[[],[R[21]]]],[11,R[20],E,E,56,[[["self"]],[T]]],[11,R[41],E,E,56,[[["self"]],[T]]],[11,R[22],E,E,56,[[["self"]],[R[42]]]],[11,R[141],E,E,56,[[]]],[11,R[140],E,E,56,[[]]],[11,"as_fail",E,E,56,[[["self"]],["fail"]]],[11,"into",E,E,59,[[],[U]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[18],E,E,59,[[[U]],[R[21]]]],[11,R[19],E,E,59,[[],[R[21]]]],[11,R[20],E,E,59,[[["self"]],[T]]],[11,R[41],E,E,59,[[["self"]],[T]]],[11,R[22],E,E,59,[[["self"]],[R[42]]]],[11,R[141],E,E,59,[[]]],[11,R[140],E,E,59,[[]]],[11,"name",E,E,56,[[["self"]],[["str"],[R[57],["str"]]]]],[11,"cause",E,E,56,[[["self"]],[[R[57],["fail"]],["fail"]]]],[11,R[53],E,E,56,[[["self"]],[[R[57],[R[53]]],[R[53]]]]],[11,"clone",E,E,55,[[["self"]],[R[119]]]],[11,"fmt",E,E,59,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,56,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,53,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,R[150],E,E,54,[[["self"],[R[40]]],[[R[21],[R[73]]],[R[73]]]]],[11,R[151],E,E,54,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[11,"fmt",E,E,56,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,R[58],E,E,54,[[],[R[386]]]],[11,"fmt",R[285],E,50,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"clone",E,E,51,[[["self"]],[R[52]]]],[11,R[58],E,E,52,[[],[R[50]]]],[11,"name",E,E,50,[[["self"]],[["str"],[R[57],["str"]]]]],[11,"cause",E,E,50,[[["self"]],[[R[57],["fail"]],["fail"]]]],[11,R[53],E,E,50,[[["self"]],[[R[57],[R[53]]],[R[53]]]]],[11,"fmt",E,E,51,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,50,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"not",R[214],E,5,[[],["lit"]]],[11,"cmp",E,E,5,[[["lit"],["self"]],[R[28]]]],[11,"cmp",E,E,4,[[["self"],["var"]],[R[28]]]],[11,"clone",E,E,4,[[["self"]],["var"]]],[11,"clone",E,E,5,[[["self"]],["lit"]]],[11,"fmt",E,E,4,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,5,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,0,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"eq",E,E,4,[[["self"],["var"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["var"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[29]]],["bool"]]],[11,"eq",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"ne",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"from",E,E,5,[[["var"]],["lit"]]],[11,"from",E,E,0,[[[R[79]]],[R[29]]]],[11,R[30],E,E,4,[[["self"],["var"]],[[R[57],[R[28]]],[R[28]]]]],[11,"lt",E,E,4,[[["self"],["var"]],["bool"]]],[11,"le",E,E,4,[[["self"],["var"]],["bool"]]],[11,"gt",E,E,4,[[["self"],["var"]],["bool"]]],[11,"ge",E,E,4,[[["self"],["var"]],["bool"]]],[11,R[30],E,E,5,[[["lit"],["self"]],[[R[57],[R[28]]],[R[28]]]]],[11,"lt",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"le",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"gt",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"ge",E,E,5,[[["lit"],["self"]],["bool"]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"next",R[294],E,2,[[["self"]],[R[57]]]],[11,R[26],R[214],E,0,[[["self"]]]],[11,R[376],E,E,0,[[["self"]],["var"]]],[11,R[27],E,E,4,[[["self"]]]],[11,R[27],E,E,5,[[["self"]]]],[11,R[27],E,E,0,[[["self"]]]],[11,"fmt",E,E,4,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,"fmt",E,E,5,[[["self"],[R[31]]],[[R[21],["error"]],["error"]]]],[11,R[58],E,E,0,[[],[R[29]]]],[11,"bitxor",E,E,5,[[["bool"]],["lit"]]],[11,R[27],R[301],E,20,[[["self"]]]],[11,R[27],R[302],E,22,[[["self"]]]],[11,R[27],R[214],E,6,[[["self"]]]],[11,R[27],R[311],E,34,[[["self"]]]],[11,R[27],E,E,35,[[["self"]]]],[11,R[27],R[315],E,41,[[["self"]]]],[11,R[27],R[317],E,46,[[["self"]]]],[11,"next",R[306],E,26,[[["self"]],[[R[57],["var"]],["var"]]]],[11,"cmp",R[301],E,20,[[["self"],[R[229]]],[R[28]]]],[11,"eq",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"eq",R[302],E,22,[[["self"],["tier"]],["bool"]]],[11,"eq",R[214],E,6,[[["self"],[R[258]]],["bool"]]],[11,"eq",R[311],E,34,[[["reason"],["self"]],["bool"]]],[11,"ne",E,E,34,[[["reason"],["self"]],["bool"]]],[11,"eq",E,E,35,[[["self"],[R[260]]],["bool"]]],[11,"ne",E,E,35,[[["self"],[R[260]]],["bool"]]],[11,"eq",R[315],E,41,[[["self"],[R[322]]],["bool"]]],[11,"eq",R[317],E,46,[[["self"],[R[154]]],["bool"]]],[11,"drop",R[208],E,9,[[["self"]]]],[11,"clone",R[301],E,20,[[["self"]],[R[229]]]],[11,"clone",R[302],E,22,[[["self"]],["tier"]]],[11,"clone",R[303],E,23,[[["self"]],[R[230]]]],[11,"clone",R[214],E,6,[[["self"]],[R[258]]]],[11,"clone",R[311],E,34,[[["self"]],["reason"]]],[11,"clone",E,E,35,[[["self"]],[R[260]]]],[11,"clone",E,E,32,[[["self"]],["implnode"]]],[11,"clone",R[312],E,36,[[["self"]],["watch"]]],[11,"clone",R[315],E,41,[[["self"]],[R[322]]]],[11,"clone",R[317],E,46,[[["self"]],[R[154]]]],[11,"clone",E,E,45,[[["self"]],[R[323]]]],[11,R[30],R[301],E,20,[[["self"],[R[229]]],[[R[28]],[R[57],[R[28]]]]]],[11,"lt",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"le",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"gt",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"ge",E,E,20,[[["self"],[R[229]]],["bool"]]],[11,"from",R[299],E,16,[[[R[260]]],[R[223]]]],[11,R[58],R[295],E,7,[[],["self"]]],[11,R[58],E,E,8,[[],[R[204]]]],[11,R[58],R[208],E,9,[[],["solver"]]],[11,R[58],R[296],E,11,[[],["analyzeconflict"]]],[11,R[58],E,E,12,[[],["levelabstraction"]]],[11,R[58],R[297],E,13,[[],[R[68]]]],[11,R[58],R[298],E,15,[[],["binaryclauses"]]],[11,R[58],R[300],E,18,[[],["clauseactivity"]]],[11,R[58],R[301],E,19,[[],[R[228]]]],[11,R[58],R[302],E,21,[[],["clausedb"]]],[11,R[58],R[303],E,23,[[],[R[230]]]],[11,R[58],R[305],E,60,[[],["analyzeconflictp"]]],[11,R[58],E,E,61,[[],[R[234]]]],[11,R[58],E,E,62,[[],[R[265]]]],[11,R[58],E,E,63,[[],[R[319]]]],[11,R[58],E,E,64,[[],[R[225]]]],[11,R[58],E,E,65,[[],[R[226]]]],[11,R[58],E,E,66,[[],[R[231]]]],[11,R[58],E,E,67,[[],[R[262]]]],[11,R[58],E,E,68,[[],["modelp"]]],[11,R[58],E,E,25,[[],["proofp"]]],[11,R[58],E,E,69,[[],["schedulep"]]],[11,R[58],E,E,70,[[],[R[238]]]],[11,R[58],E,E,71,[[],[R[253]]]],[11,R[58],E,E,72,[[],[R[121]]]],[11,R[58],E,E,73,[[],[R[232]]]],[11,R[58],E,E,74,[[],["trailp"]]],[11,R[58],E,E,75,[[],[R[75]]]],[11,R[58],E,E,76,[[],["vsidsp"]]],[11,R[58],E,E,77,[[],[R[216]]]],[11,R[58],R[304],E,24,[[],[R[370]]]],[11,R[58],R[306],E,26,[[],["vsids"]]],[11,R[58],R[308],E,27,[[],["model"]]],[11,R[58],R[309],E,29,[[],["mapstep"]]],[11,R[58],R[255],E,28,[[],["proof"]]],[11,R[58],R[310],E,30,[[],[R[67]]]],[11,R[58],E,E,31,[[],["trail"]]],[11,R[58],R[311],E,33,[[],["implgraph"]]],[11,R[58],R[312],E,37,[[],[R[320]]]],[11,R[58],R[314],E,39,[[],["lubysequence"]]],[11,R[58],R[313],E,38,[[],[R[321]]]],[11,R[58],R[315],E,41,[[],[R[322]]]],[11,R[58],E,E,40,[[],["solverstate"]]],[11,R[58],R[316],E,42,[[],["tmpdata"]]],[11,R[58],E,E,43,[[],["tmpflags"]]],[11,R[58],R[317],E,45,[[],[R[323]]]],[11,R[58],R[318],E,47,[[],["varmap"]]],[11,R[58],E,E,48,[[],["varbimap"]]],[11,R[58],R[279],E,44,[[],[R[131]]]],[11,"fmt",R[208],E,10,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[301],E,20,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[302],E,22,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[214],E,6,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[311],E,34,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,35,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[315],E,41,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[317],E,46,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[208],E,10,[[["self"],[R[31]]],[R[21]]]],[11,"bitor",R[305],E,60,[[[R[157]]]]],[11,"bitor",E,E,61,[[[R[157]]]]],[11,"bitor",E,E,62,[[[R[157]]]]],[11,"bitor",E,E,63,[[[R[157]]]]],[11,"bitor",E,E,64,[[[R[157]]]]],[11,"bitor",E,E,65,[[[R[157]]]]],[11,"bitor",E,E,66,[[[R[157]]]]],[11,"bitor",E,E,67,[[[R[157]]]]],[11,"bitor",E,E,68,[[[R[157]]]]],[11,"bitor",E,E,25,[[[R[157]]]]],[11,"bitor",E,E,69,[[[R[157]]]]],[11,"bitor",E,E,70,[[[R[157]]]]],[11,"bitor",E,E,71,[[[R[157]]]]],[11,"bitor",E,E,72,[[[R[157]]]]],[11,"bitor",E,E,73,[[[R[157]]]]],[11,"bitor",E,E,74,[[[R[157]]]]],[11,"bitor",E,E,75,[[[R[157]]]]],[11,"bitor",E,E,76,[[[R[157]]]]],[11,"bitor",E,E,77,[[[R[157]]]]],[11,R[141],R[304],E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,"name",R[208],E,10,[[["self"]],[[R[57],["str"]],["str"]]]],[11,"cause",E,E,10,[[["self"]],[[R[57],["fail"]],["fail"]]]],[11,R[53],E,E,10,[[["self"]],[[R[57],[R[53]]],[R[53]]]]],[11,R[26],E,"Add a clause to the solver.",9,[[["self"]]]],[11,R[376],E,"Add a new variable to the solver.",9,[[["self"]],["var"]]],[11,"serialize",R[295],E,8,[[["self"],["__s"]],[R[21]]]],[11,"deserialize",E,E,8,[[["__d"]],[R[21]]]],[11,"new",R[214],R[438],0,[[],[R[29]]]],[11,R[6],E,R[439],0,[[["self"]],[R[7]]]],[11,R[221],E,R[440],0,[[["self"],[R[7]]]]],[11,"len",E,R[441],0,[[["self"]],[R[7]]]],[11,"iter",E,R[442],0,[[["self"]]]],[11,R[14],E,R[445],4,[[["isize"]],["var"]]],[11,R[13],E,R[446],4,[[[R[7]]],["var"]]],[11,R[15],E,R[447],4,[[],["isize"]]],[11,"index",E,R[448],4,[[],[R[7]]]],[11,"max_var",E,R[449],4,[[],["var"]]],[11,R[450],E,R[451],4,[[],[R[7]]]],[11,"lit",E,R[452],4,[[["bool"]],["lit"]]],[11,R[11],E,R[453],4,[[],["lit"]]],[11,R[12],E,R[454],4,[[],["lit"]]],[11,"from_var",E,R[455],5,[[["bool"],["var"]],["lit"]]],[11,R[11],E,R[456],5,[[["var"]],["lit"]]],[11,R[12],E,R[457],5,[[["var"]],["lit"]]],[11,R[13],E,R[458],5,[[[R[7]],["bool"]],["lit"]]],[11,R[459],E,R[460],5,[[[R[7]]],["lit"]]],[11,R[14],E,R[461],5,[[["isize"]],["lit"]]],[11,R[15],E,R[462],5,[[],["isize"]]],[11,"index",E,R[463],5,[[],[R[7]]]],[11,"var",E,R[464],5,[[],["var"]]],[11,R[465],E,R[466],5,[[],["bool"]]],[11,R[467],E,R[468],5,[[],["bool"]]],[11,"code",E,R[469],5,[[],[R[7]]]],[11,"map_var",E,R[470],5,[[["impl fnonce(var) -> var"]],["lit"]]],[11,"new",R[285],R[414],52,[[],[R[50]]]],[11,"parse",E,R[415],52,[[[R[324]]],[[R[21],[R[29],"error"]],[R[29]],["error"]]]],[11,R[416],E,R[417],52,[[["impl fnmut(&mut dimacsparser) -> result<(), error>"],[R[324]]],[[R[21],[R[50],"error"]],["error"],[R[50]]]]],[11,R[418],E,R[419],52,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,"eof",E,R[420],52,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,R[421],E,R[422],52,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,R[423],E,R[424],52,[[["self"]],[R[29]]]],[11,"header",E,R[425],52,[[["self"]],[[R[52]],[R[57],[R[52]]]]]],[11,R[47],E,R[426],52,[[["self"]],[R[7]]]],[11,R[6],E,R[427],52,[[["self"]],[R[7]]]],[11,"new",R[288],R[381],54,[[],[R[386]]]],[11,R[26],E,R[137],54,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[11,R[325],E,R[382],54,[[["self"],[R[29]]],[[R[21],[R[73]]],[R[73]]]]],[11,R[326],E,R[327],54,[[["self"],[R[324]]],[[R[21],["error"]],["error"]]]],[11,R[328],E,R[329],54,[[["self"],[R[259]]]]],[11,R[383],E,R[384],54,[[["self"],[R[385]]]]],[11,R[138],E,R[139],54,[[["self"],[R[324]]],[[R[21],[R[73]]],[R[73]]]]],[11,R[377],E,R[378],55,[[["var"]],[[R[57],["var"]],["var"]]]]],"p":[[3,R[32]],[8,R[34]],[3,R[33]],[8,R[35]],[3,"Var"],[3,"Lit"],[4,R[205]],[3,R[330]],[3,R[331]],[3,"Solver"],[4,R[332]],[3,R[333]],[3,R[334]],[3,R[111]],[4,R[335]],[3,R[336]],[4,R[337]],[3,"Clause"],[3,R[338]],[3,R[339]],[3,R[340]],[3,"ClauseDb"],[4,"Tier"],[3,R[341]],[3,"Context"],[3,"ProofP"],[3,"Vsids"],[3,"Model"],[3,"Proof"],[3,"MapStep"],[3,R[342]],[3,"Trail"],[3,"ImplNode"],[3,R[343]],[4,"Reason"],[4,R[267]],[3,"Watch"],[3,R[344]],[3,"Schedule"],[3,R[345]],[3,R[346]],[4,"SatState"],[3,"TmpData"],[3,"TmpFlags"],[3,R[169]],[3,"VarData"],[4,R[170]],[3,"VarMap"],[3,"VarBiMap"],[3,R[347]],[4,R[56]],[3,R[54]],[3,R[55]],[4,R[89]],[3,"Checker"],[3,R[87]],[4,R[158]],[8,R[132]],[8,R[134]],[4,R[123]],[3,R[348]],[3,R[349]],[3,R[350]],[3,R[351]],[3,R[352]],[3,R[353]],[3,R[354]],[3,R[355]],[3,"ModelP"],[3,R[356]],[3,R[357]],[3,R[358]],[3,R[373]],[3,R[359]],[3,"TrailP"],[3,R[174]],[3,"VsidsP"],[3,R[360]]]};
searchIndex["varisat_checker"]={"doc":R[361],"i":[[3,R[82],R[60],R[83],N,N],[12,R[59],E,E,0,N],[12,R[84],E,E,0,N],[12,R[376],E,E,0,N],[3,R[87],E,R[88],N,N],[12,"0",E,E,1,N],[3,R[85],E,R[86],N,N],[3,"Checker",E,R[120],N,N],[12,"ctx",E,E,2,N],[4,R[89],E,R[90],N,N],[13,"UserVar",E,R[91],3,N],[12,"var",R[61],E,3,N],[12,R[59],E,E,3,N],[13,R[66],R[60],R[93],3,N],[12,"id",R[61],E,3,N],[12,R[62],E,E,3,N],[13,R[95],R[60],R[96],3,N],[12,"id",R[61],E,3,N],[12,R[97],E,E,3,N],[12,R[62],E,E,3,N],[13,R[98],R[60],R[99],3,N],[12,"id",R[61],E,3,N],[12,R[62],E,E,3,N],[13,R[175],R[60],R[100],3,N],[12,"id",R[61],E,3,N],[12,R[101],E,E,3,N],[12,R[62],E,E,3,N],[12,R[63],E,E,3,N],[13,R[102],R[60],R[103],3,N],[12,"id",R[61],E,3,N],[12,R[62],E,E,3,N],[13,R[104],R[60],R[105],3,N],[12,"id",R[61],E,3,N],[12,R[64],E,E,3,N],[12,R[62],E,E,3,N],[12,R[63],E,E,3,N],[13,R[106],R[60],R[107],3,N],[12,"id",R[61],E,3,N],[12,R[64],E,E,3,N],[12,R[62],E,E,3,N],[12,"pivot",E,E,3,N],[12,R[63],E,E,3,N],[13,R[108],R[60],R[109],3,N],[12,"id",R[61],E,3,N],[12,R[62],E,E,3,N],[13,"Model",R[60],R[110],3,N],[12,R[67],R[61],E,3,N],[13,R[111],R[60],R[112],3,N],[12,R[68],R[61],E,3,N],[13,R[69],R[60],R[113],3,N],[12,R[70],R[61],E,3,N],[12,R[63],E,E,3,N],[4,R[114],R[60],R[115],N,N],[13,"Sample",E,E,4,N],[13,"Witness",E,E,4,N],[4,R[123],E,R[124],N,N],[13,R[125],E,E,5,N],[12,"var",R[65],E,5,N],[13,R[126],R[60],E,5,N],[12,"var",R[65],E,5,N],[13,"HideVar",R[60],E,5,N],[12,"var",R[65],E,5,N],[13,R[129],R[60],E,5,N],[12,"var",R[65],E,5,N],[13,R[66],R[60],E,5,N],[12,R[62],R[65],E,5,N],[13,"Unsat",R[60],E,5,N],[13,"Model",E,E,5,N],[12,R[67],R[65],E,5,N],[13,"Assume",R[60],E,5,N],[12,R[68],R[65],E,5,N],[13,R[69],R[60],E,5,N],[12,R[70],R[65],E,5,N],[4,R[158],R[60],R[362],N,N],[13,R[363],E,E,6,N],[12,"step",R[71],E,6,N],[13,"IoError",R[60],E,6,N],[12,"step",R[71],E,6,N],[12,"cause",E,E,6,N],[13,R[364],R[60],E,6,N],[12,"step",R[71],E,6,N],[12,"cause",E,E,6,N],[13,R[365],R[60],E,6,N],[12,"step",R[71],E,6,N],[12,"msg",E,E,6,N],[12,R[366],E,E,6,N],[13,R[291],R[60],E,6,N],[12,"cause",R[71],E,6,N],[13,R[292],R[60],E,6,N],[0,"internal",E,R[72],N,N],[8,R[159],"varisat_checker::internal",R[72],N,N],[10,R[150],E,E,7,[[["self"],[R[40]]],[[R[21],[R[73]]],[R[73]]]]],[10,R[151],E,E,7,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[0,R[79],R[60],"Clause storage (unit and non-unit clauses).",N,N],[3,R[160],R[142],"Literals of a clause, either inline or an index into a…",N,N],[12,"length",E,E,8,N],[12,"inline",E,E,8,N],[3,"Clause",E,"Literals and metadata for non-unit clauses.",N,N],[12,"id",E,"LRAT clause id.",9,N],[12,"ref_count",E,"How often the clause is present as irred., red. clause.",9,N],[12,"lits",E,"Clause's literals.",9,N],[3,R[161],E,"Known unit clauses and metadata.",N,N],[12,"id",E,E,10,N],[12,"value",E,E,10,N],[3,"Clauses",E,"Checker clause storage.",N,N],[12,"next_clause_id",E,"Next clause id to use.",11,N],[12,"literal_buffer",E,"Literal storage for clauses,",11,N],[12,R[367],E,"Number of literals in the buffer which are from deleted…",11,N],[12,R[79],E,"Stores all known non-unit clauses indexed by their hash.",11,N],[12,"unit_clauses",E,"Stores known unit clauses and propagations during a clause…",11,N],[12,"unit_conflict",E,"This stores a conflict of input unit clauses.",11,N],[4,"UnitId",E,"Identifies the origin of a unit clause.",N,N],[13,"Global",E,E,12,N],[13,"TracePos",E,E,12,N],[13,"InClause",E,E,12,N],[4,R[162],E,"Return type of [`store_clause`]",N,N],[13,"New",E,E,13,N],[13,"Duplicate",E,E,13,N],[13,"NewlyIrredundant",E,E,13,N],[4,R[163],E,"Return type of [`delete_clause`]",N,N],[13,"Unchanged",E,E,14,N],[13,"NewlyRedundant",E,E,14,N],[13,"Removed",E,E,14,N],[5,R[26],E,R[137],N,[[["const",[R[74],"mut"]],[R[74]],["mut",[R[75],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"store_clause",E,"Adds a clause to the checker data structures.",N,[[[R[74]],["mut",[R[75],"mut"]],["const",[R[74],"mut"]],["bool"]]]],[5,"store_unit_clause",E,"Adds a unit clause to the checker data structures.",N,[[["lit"],["mut",[R[76],"mut"]],[R[76]],["mut",[R[77],"ref"]]]]],[5,R[368],E,"Delete a clause from the current formula.",N,[[[R[74]],["bool"],["const",[R[77],"mut"]],["const",[R[74],"const"]]],[[R[21],[R[73]]],[R[73]]]]],[5,R[369],E,"Perform a garbage collection if required",N,[[["mut",[R[76],"ref"]],[R[76]],["ref",[R[370]]]]]],[17,"INLINE_LITS",E,E,N,N],[11,"new",E,"Create a new ClauseLits, storing them in the given buffer…",8,[[["vec"]],["clauselits"]]],[11,"slice",E,"Returns the literals as a slice given a storage buffer",8,[[["self"]]]],[11,"buffer_used",E,"Literals stored in the literal buffer",8,[[["self"]],[R[7]]]],[11,R[371],E,"Value of a literal if known from unit clauses.",11,[[["self"],["lit"]],[R[57]]]],[0,R[370],R[60],R[78],N,N],[3,"Context",R[143],R[78],N,N],[12,"checker_state",E,E,15,N],[12,"clause_hasher",E,E,15,N],[12,R[79],E,E,15,N],[12,R[81],E,E,15,N],[12,"rup_check",E,E,15,N],[12,"tmp_data",E,E,15,N],[12,R[131],E,E,15,N],[0,"parts",E,R[372],N,N],[3,R[171],R[144],E,N,N],[3,R[172],E,E,N,N],[3,"ClausesP",E,E,N,N],[3,R[80],E,E,N,N],[12,"phantom",E,E,16,N],[3,R[173],E,E,N,N],[3,R[373],E,E,N,N],[3,R[174],E,E,N,N],[17,R[80],E,E,N,N],[0,"hash",R[60],"Computation of clause hashes.",N,N],[3,R[164],R[145],E,N,N],[12,R[374],E,R[375],17,N],[12,"buffered_solver_var_names",E,"Changed solver names that are not yet reflected in the…",17,N],[12,"rename_in_buffered_solver_var_names",E,"Does buffered_solver_var_names contain a new name?",17,N],[12,"solver_var_names",E,"Current mapping from global var names to solver var names,…",17,N],[5,"rehash",E,"Recompute all clause hashes if necessary",N,[[[R[76]],["mut",[R[74],"ref"]],["mut",[R[76],"mut"]]]]],[11,R[176],E,"Compute a clause hash of the current bit size",17,[[["self"]],[R[39]]]],[0,R[81],R[60],"Processing of checked proof steps.",N,N],[3,R[82],R[92],R[83],N,N],[12,R[59],E,E,0,N],[12,R[84],E,E,0,N],[12,R[376],E,E,0,N],[3,R[85],E,R[86],N,N],[3,R[87],E,R[88],N,N],[12,"0",E,E,1,N],[3,R[165],E,"Registry of proof and transcript processors.",N,N],[12,"processors",E,"Registered proof processors.",18,N],[12,"transcript_processors",E,"Registered transcript processors.",18,N],[12,R[122],E,"Proof step to transcript step conversion.",18,N],[4,R[89],E,R[90],N,N],[13,"UserVar",E,R[91],3,N],[12,"var",R[94],E,3,N],[12,R[59],E,E,3,N],[13,R[66],R[92],R[93],3,N],[12,"id",R[94],E,3,N],[12,R[62],E,E,3,N],[13,R[95],R[92],R[96],3,N],[12,"id",R[94],E,3,N],[12,R[97],E,E,3,N],[12,R[62],E,E,3,N],[13,R[98],R[92],R[99],3,N],[12,"id",R[94],E,3,N],[12,R[62],E,E,3,N],[13,R[175],R[92],R[100],3,N],[12,"id",R[94],E,3,N],[12,R[101],E,E,3,N],[12,R[62],E,E,3,N],[12,R[63],E,E,3,N],[13,R[102],R[92],R[103],3,N],[12,"id",R[94],E,3,N],[12,R[62],E,E,3,N],[13,R[104],R[92],R[105],3,N],[12,"id",R[94],E,3,N],[12,R[64],E,E,3,N],[12,R[62],E,E,3,N],[12,R[63],E,E,3,N],[13,R[106],R[92],R[107],3,N],[12,"id",R[94],E,3,N],[12,R[64],E,E,3,N],[12,R[62],E,E,3,N],[12,"pivot",E,E,3,N],[12,R[63],E,E,3,N],[13,R[108],R[92],R[109],3,N],[12,"id",R[94],E,3,N],[12,R[62],E,E,3,N],[13,"Model",R[92],R[110],3,N],[12,R[67],R[94],E,3,N],[13,R[111],R[92],R[112],3,N],[12,R[68],R[94],E,3,N],[13,R[69],R[92],R[113],3,N],[12,R[70],R[94],E,3,N],[12,R[63],E,E,3,N],[4,R[114],R[92],R[115],N,N],[13,"Sample",E,E,4,N],[13,"Witness",E,E,4,N],[5,R[116],E,R[118],N,[[[R[117]],["const",[R[75],"mut"]],[R[75]],["mut",[R[155],"ref"]]],[[R[21],[R[73]]],[R[73]]]]],[8,R[132],E,R[133],N,N],[10,R[116],E,E,19,[[["self"],[R[117]],[R[119]]],[["error"],[R[21],["error"]]]]],[11,R[377],R[60],R[378],1,[[["var"]],[[R[57],["var"]],["var"]]]],[11,"step",R[92],R[118],18,[[["self"],[R[117]],[R[119]]],[[R[21],[R[73]]],[R[73]]]]],[0,"rup",R[60],"Reverse unit propagation redundancy checks.",N,N],[3,R[166],R[146],"Propagation of the RUP check.",N,N],[12,"id",E,E,20,N],[12,"edges",E,E,20,N],[12,"unused",E,E,20,N],[3,"RupCheck",E,E,N,N],[12,"trail",E,"Stores overwritten values in `unit_clauses` to undo…",21,N],[12,"trace",E,"Involved clauses during the last check.",21,N],[12,"trace_edges",E,"Edges of the trace implication graph.",21,N],[12,"trace_ids",E,"Just the ids of `trace`.",21,N],[5,"check_clause_with_hashes",E,"Check whether a clause is implied by clauses of the given…",N,[[["const",[R[77],"mut"]],["mut",[R[75],"mut"]],[R[77]]],[[R[21],[R[73]]],[R[73]]]]],[0,"sorted_lits",R[60],"Utilities for slices of sorted literals.",N,N],[5,"copy_canonical","varisat_checker::sorted_lits","Sort literals, remove duplicates and check for tautologic…",N,[[["vec"]],["bool"]]],[5,"is_subset",E,"Test whether a set of literals is a (strict) subset of…",N,[[["bool"]],["bool"]]],[0,"state",R[60],"Checker state and checking of proof steps.",N,N],[3,R[167],R[147],R[120],N,N],[12,"step",E,"Current step number.",22,N],[12,"unsat",E,"Whether unsatisfiability was proven.",22,N],[12,"ended",E,"Whether an end of proof step was checked.",22,N],[12,"previous_irred_clause_id",E,"Last added irredundant clause id.",22,N],[12,"previous_irred_clause_lits",E,"Last added irredundant clause literals.",22,N],[12,R[68],E,"Current assumptions, used to check FailedAssumptions and…",22,N],[5,"check_step",E,"Check a single proof step",N,[[["mut",[R[121],"mut"]],[R[40]],[R[75]],["mut",[R[75],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_delete_var_step",E,"Check a DeleteVar step",N,[[["mut",[R[75],"mut"]],["const",[R[77],"mut"]],[R[77]],["var"]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_change_sampling_mode",E,"Check a ChangeSamplingMode step",N,[[["bool"],["mut",[R[75],"mut"]],["const",[R[77],"mut"]],[R[77]],["var"]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_at_clause_step",E,"Check an AtClause step",N,[[["bool"],["mut",[R[121],"mut"]],[R[75]],["mut",[R[75],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_delete_clause_step",E,"Check a DeleteClause step",N,[[[R[74]],[R[44]],["mut",[R[75],"mut"]],["const",[R[74],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_unit_clauses_step",E,"Check a UnitClauses step",N,[[["mut",[R[75],"mut"]],[R[75]],["mut",[R[156],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_model_step",E,"Check a Model step",N,[[["const",[R[76],"const"]],["const",[R[75],"const"]],[R[75]]],[[R[21],[R[73]]],[R[73]]]]],[5,"check_failed_assumptions_step",E,"Check a FailedAssumptions step",N,[[["mut",[R[75],"mut"]],["const",[R[77],"mut"]],[R[77]]],[[R[21],[R[73]]],[R[73]]]]],[5,R[138],E,R[139],N,[[["mut",[R[121],"mut"]],[R[75]],["mut",[R[75],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[5,"process_unit_conflicts",E,"Process unit conflicts detected during clause loading.",N,[[["const",[R[75],"const"]],[R[75]],["const",[R[76],"mut"]]],[[R[21],[R[73]]],[R[73]]]]],[11,"subsumed_by_previous_irred_clause",E,"Check whether a given clause is subsumed by the last added…",22,[[["self"]],["bool"]]],[0,"tmp",R[60],R[379],N,N],[3,"TmpData",R[148],E,N,N],[12,"tmp",E,"Temporary storage for literals.",23,N],[0,R[122],R[60],"Proof transcripts.",N,N],[3,R[168],R[127],"Create a transcript from proof steps",N,N],[12,"lit_buf",E,E,24,N],[4,R[123],E,R[124],N,N],[13,R[125],E,E,5,N],[12,"var",R[128],E,5,N],[13,R[126],R[127],E,5,N],[12,"var",R[128],E,5,N],[13,"HideVar",R[127],E,5,N],[12,"var",R[128],E,5,N],[13,R[129],R[127],E,5,N],[12,"var",R[128],E,5,N],[13,R[66],R[127],E,5,N],[12,R[62],R[128],E,5,N],[13,"Unsat",R[127],E,5,N],[13,"Model",E,E,5,N],[12,R[67],R[128],E,5,N],[13,"Assume",R[127],E,5,N],[12,R[68],R[128],E,5,N],[13,R[69],R[127],E,5,N],[12,R[70],R[128],E,5,N],[8,R[134],R[127],R[135],N,N],[10,R[116],E,R[136],25,[[["self"],[R[130]]],[["error"],[R[21],["error"]]]]],[11,"transcript_step",E,"If a checked proof step has a corresponding transcript…",24,[[["self"],[R[117]],[R[119]]],[[R[57],[R[130]]],[R[130]]]]],[0,R[131],R[60],R[380],N,N],[3,"LitData",R[149],"Data for each literal.",N,N],[12,R[47],E,E,26,N],[3,"VarData",E,"Data for each variable.",N,N],[12,R[59],E,E,27,N],[12,R[84],E,E,27,N],[3,R[169],E,E,N,N],[12,"lit_data",E,"Information about literals in the current formula.",28,N],[12,"var_data",E,"Information about variables in the current formula.",28,N],[12,"used_user_vars",E,"User var names in use.",28,N],[4,R[170],E,E,N,N],[13,"Sample",E,E,29,N],[13,"Witness",E,E,29,N],[13,"Hide",E,E,29,N],[5,"ensure_sampling_var",E,"Check that var is a sampling user var and create new…",N,[[["const",[R[77],"mut"]],[R[77]],["mut",[R[75],"mut"]],["var"]],[[R[21],[R[73]]],[R[73]]]]],[5,"ensure_var",E,"Ensure that a variable is present.",N,[[["mut",[R[76],"ref"]],[R[75]],["mut",[R[75],"mut"]],["var"]]]],[5,"add_user_mapping",E,"Add a user/global var mapping.",N,[[["mut",[R[75],"mut"]],["const",[R[77],"mut"]],[R[77]],["var"]],[[R[21],[R[73]]],[R[73]]]]],[5,"remove_user_mapping",E,"Remove a user/global var mapping.",N,[[["mut",[R[75],"mut"]],["const",[R[77],"mut"]],[R[77]],["var"]],[[R[21],[R[73]]],[R[73]]]]],[17,"_DERIVE_failure_Fail_FOR_CheckerError",R[60],E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_CheckerError",E,E,N,N],[8,R[132],E,R[133],N,N],[10,R[116],E,E,19,[[["self"],[R[117]],[R[119]]],[["error"],[R[21],["error"]]]]],[8,R[134],E,R[135],N,N],[10,R[116],E,R[136],25,[[["self"],[R[130]]],[["error"],[R[21],["error"]]]]],[11,"check_failed",E,"Generate a CheckFailed error with an empty debug_step",6,[[["string"],["u64"]],[R[73]]]],[11,"new",E,R[381],2,[[],[R[386]]]],[11,R[26],E,R[137],2,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[11,R[325],E,R[382],2,[[["self"],[R[29]]],[[R[21],[R[73]]],[R[73]]]]],[11,R[326],E,R[327],2,[[["self"]],[["error"],[R[21],["error"]]]]],[11,R[328],E,R[329],2,[[["self"],[R[259]]]]],[11,R[383],E,R[384],2,[[["self"],[R[385]]]]],[11,R[138],E,R[139],2,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,R[141],E,E,0,[[]]],[11,R[140],E,E,0,[[]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[18],E,E,1,[[[U]],[R[21]]]],[11,R[19],E,E,1,[[],[R[21]]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[42]]]],[11,R[141],E,E,1,[[]]],[11,R[140],E,E,1,[[]]],[11,"into",E,E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[18],E,E,30,[[[U]],[R[21]]]],[11,R[19],E,E,30,[[],[R[21]]]],[11,R[20],E,E,30,[[["self"]],[T]]],[11,R[41],E,E,30,[[["self"]],[T]]],[11,R[22],E,E,30,[[["self"]],[R[42]]]],[11,R[141],E,E,30,[[]]],[11,R[140],E,E,30,[[]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[18],E,E,2,[[[U]],[R[21]]]],[11,R[19],E,E,2,[[],[R[21]]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[42]]]],[11,R[141],E,E,2,[[]]],[11,R[140],E,E,2,[[]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[18],E,E,3,[[[U]],[R[21]]]],[11,R[19],E,E,3,[[],[R[21]]]],[11,R[20],E,E,3,[[["self"]],[T]]],[11,R[41],E,E,3,[[["self"]],[T]]],[11,R[22],E,E,3,[[["self"]],[R[42]]]],[11,R[141],E,E,3,[[]]],[11,R[140],E,E,3,[[]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[18],E,E,4,[[[U]],[R[21]]]],[11,R[19],E,E,4,[[],[R[21]]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[42]]]],[11,R[141],E,E,4,[[]]],[11,R[140],E,E,4,[[]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[18],E,E,5,[[[U]],[R[21]]]],[11,R[19],E,E,5,[[],[R[21]]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[42]]]],[11,R[141],E,E,5,[[]]],[11,R[140],E,E,5,[[]]],[11,"into",E,E,6,[[],[U]]],[11,R[25],E,E,6,[[["self"]],["string"]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[18],E,E,6,[[[U]],[R[21]]]],[11,R[19],E,E,6,[[],[R[21]]]],[11,R[20],E,E,6,[[["self"]],[T]]],[11,R[41],E,E,6,[[["self"]],[T]]],[11,R[22],E,E,6,[[["self"]],[R[42]]]],[11,"as_fail",E,E,6,[[["self"]],["fail"]]],[11,R[141],E,E,6,[[]]],[11,R[140],E,E,6,[[]]],[11,"into",R[142],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[18],E,E,8,[[[U]],[R[21]]]],[11,R[19],E,E,8,[[],[R[21]]]],[11,R[20],E,E,8,[[["self"]],[T]]],[11,R[41],E,E,8,[[["self"]],[T]]],[11,R[22],E,E,8,[[["self"]],[R[42]]]],[11,R[141],E,E,8,[[]]],[11,R[140],E,E,8,[[]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[18],E,E,9,[[[U]],[R[21]]]],[11,R[19],E,E,9,[[],[R[21]]]],[11,R[20],E,E,9,[[["self"]],[T]]],[11,R[41],E,E,9,[[["self"]],[T]]],[11,R[22],E,E,9,[[["self"]],[R[42]]]],[11,R[141],E,E,9,[[]]],[11,R[140],E,E,9,[[]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[24],E,E,10,[[[T],["self"]]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[18],E,E,10,[[[U]],[R[21]]]],[11,R[19],E,E,10,[[],[R[21]]]],[11,R[20],E,E,10,[[["self"]],[T]]],[11,R[41],E,E,10,[[["self"]],[T]]],[11,R[22],E,E,10,[[["self"]],[R[42]]]],[11,R[141],E,E,10,[[]]],[11,R[140],E,E,10,[[]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[18],E,E,11,[[[U]],[R[21]]]],[11,R[19],E,E,11,[[],[R[21]]]],[11,R[20],E,E,11,[[["self"]],[T]]],[11,R[41],E,E,11,[[["self"]],[T]]],[11,R[22],E,E,11,[[["self"]],[R[42]]]],[11,R[141],E,E,11,[[]]],[11,R[140],E,E,11,[[]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[24],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[18],E,E,12,[[[U]],[R[21]]]],[11,R[19],E,E,12,[[],[R[21]]]],[11,R[20],E,E,12,[[["self"]],[T]]],[11,R[41],E,E,12,[[["self"]],[T]]],[11,R[22],E,E,12,[[["self"]],[R[42]]]],[11,R[141],E,E,12,[[]]],[11,R[140],E,E,12,[[]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[24],E,E,13,[[[T],["self"]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[18],E,E,13,[[[U]],[R[21]]]],[11,R[19],E,E,13,[[],[R[21]]]],[11,R[20],E,E,13,[[["self"]],[T]]],[11,R[41],E,E,13,[[["self"]],[T]]],[11,R[22],E,E,13,[[["self"]],[R[42]]]],[11,R[141],E,E,13,[[]]],[11,R[140],E,E,13,[[]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[24],E,E,14,[[[T],["self"]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[18],E,E,14,[[[U]],[R[21]]]],[11,R[19],E,E,14,[[],[R[21]]]],[11,R[20],E,E,14,[[["self"]],[T]]],[11,R[41],E,E,14,[[["self"]],[T]]],[11,R[22],E,E,14,[[["self"]],[R[42]]]],[11,R[141],E,E,14,[[]]],[11,R[140],E,E,14,[[]]],[11,"into",R[143],E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[18],E,E,15,[[[U]],[R[21]]]],[11,R[19],E,E,15,[[],[R[21]]]],[11,R[20],E,E,15,[[["self"]],[T]]],[11,R[41],E,E,15,[[["self"]],[T]]],[11,R[22],E,E,15,[[["self"]],[R[42]]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,"into",R[144],E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[18],E,E,31,[[[U]],[R[21]]]],[11,R[19],E,E,31,[[],[R[21]]]],[11,R[20],E,E,31,[[["self"]],[T]]],[11,R[41],E,E,31,[[["self"]],[T]]],[11,R[22],E,E,31,[[["self"]],[R[42]]]],[11,R[141],E,E,31,[[]]],[11,R[140],E,E,31,[[]]],[11,"into",E,E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[18],E,E,32,[[[U]],[R[21]]]],[11,R[19],E,E,32,[[],[R[21]]]],[11,R[20],E,E,32,[[["self"]],[T]]],[11,R[41],E,E,32,[[["self"]],[T]]],[11,R[22],E,E,32,[[["self"]],[R[42]]]],[11,R[141],E,E,32,[[]]],[11,R[140],E,E,32,[[]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[18],E,E,33,[[[U]],[R[21]]]],[11,R[19],E,E,33,[[],[R[21]]]],[11,R[20],E,E,33,[[["self"]],[T]]],[11,R[41],E,E,33,[[["self"]],[T]]],[11,R[22],E,E,33,[[["self"]],[R[42]]]],[11,R[141],E,E,33,[[]]],[11,R[140],E,E,33,[[]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[18],E,E,16,[[[U]],[R[21]]]],[11,R[19],E,E,16,[[],[R[21]]]],[11,R[20],E,E,16,[[["self"]],[T]]],[11,R[41],E,E,16,[[["self"]],[T]]],[11,R[22],E,E,16,[[["self"]],[R[42]]]],[11,R[141],E,E,16,[[]]],[11,R[140],E,E,16,[[]]],[11,"into",E,E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[18],E,E,34,[[[U]],[R[21]]]],[11,R[19],E,E,34,[[],[R[21]]]],[11,R[20],E,E,34,[[["self"]],[T]]],[11,R[41],E,E,34,[[["self"]],[T]]],[11,R[22],E,E,34,[[["self"]],[R[42]]]],[11,R[141],E,E,34,[[]]],[11,R[140],E,E,34,[[]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[18],E,E,35,[[[U]],[R[21]]]],[11,R[19],E,E,35,[[],[R[21]]]],[11,R[20],E,E,35,[[["self"]],[T]]],[11,R[41],E,E,35,[[["self"]],[T]]],[11,R[22],E,E,35,[[["self"]],[R[42]]]],[11,R[141],E,E,35,[[]]],[11,R[140],E,E,35,[[]]],[11,"into",E,E,36,[[],[U]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[18],E,E,36,[[[U]],[R[21]]]],[11,R[19],E,E,36,[[],[R[21]]]],[11,R[20],E,E,36,[[["self"]],[T]]],[11,R[41],E,E,36,[[["self"]],[T]]],[11,R[22],E,E,36,[[["self"]],[R[42]]]],[11,R[141],E,E,36,[[]]],[11,R[140],E,E,36,[[]]],[11,"into",R[145],E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[18],E,E,17,[[[U]],[R[21]]]],[11,R[19],E,E,17,[[],[R[21]]]],[11,R[20],E,E,17,[[["self"]],[T]]],[11,R[41],E,E,17,[[["self"]],[T]]],[11,R[22],E,E,17,[[["self"]],[R[42]]]],[11,R[141],E,E,17,[[]]],[11,R[140],E,E,17,[[]]],[11,"into",R[92],E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[18],E,E,18,[[[U]],[R[21]]]],[11,R[19],E,E,18,[[],[R[21]]]],[11,R[20],E,E,18,[[["self"]],[T]]],[11,R[41],E,E,18,[[["self"]],[T]]],[11,R[22],E,E,18,[[["self"]],[R[42]]]],[11,R[141],E,E,18,[[]]],[11,R[140],E,E,18,[[]]],[11,"into",R[146],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[18],E,E,20,[[[U]],[R[21]]]],[11,R[19],E,E,20,[[],[R[21]]]],[11,R[20],E,E,20,[[["self"]],[T]]],[11,R[41],E,E,20,[[["self"]],[T]]],[11,R[22],E,E,20,[[["self"]],[R[42]]]],[11,R[141],E,E,20,[[]]],[11,R[140],E,E,20,[[]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[18],E,E,21,[[[U]],[R[21]]]],[11,R[19],E,E,21,[[],[R[21]]]],[11,R[20],E,E,21,[[["self"]],[T]]],[11,R[41],E,E,21,[[["self"]],[T]]],[11,R[22],E,E,21,[[["self"]],[R[42]]]],[11,R[141],E,E,21,[[]]],[11,R[140],E,E,21,[[]]],[11,"into",R[147],E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[18],E,E,22,[[[U]],[R[21]]]],[11,R[19],E,E,22,[[],[R[21]]]],[11,R[20],E,E,22,[[["self"]],[T]]],[11,R[41],E,E,22,[[["self"]],[T]]],[11,R[22],E,E,22,[[["self"]],[R[42]]]],[11,R[141],E,E,22,[[]]],[11,R[140],E,E,22,[[]]],[11,"into",R[148],E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[18],E,E,23,[[[U]],[R[21]]]],[11,R[19],E,E,23,[[],[R[21]]]],[11,R[20],E,E,23,[[["self"]],[T]]],[11,R[41],E,E,23,[[["self"]],[T]]],[11,R[22],E,E,23,[[["self"]],[R[42]]]],[11,R[141],E,E,23,[[]]],[11,R[140],E,E,23,[[]]],[11,"into",R[127],E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[18],E,E,24,[[[U]],[R[21]]]],[11,R[19],E,E,24,[[],[R[21]]]],[11,R[20],E,E,24,[[["self"]],[T]]],[11,R[41],E,E,24,[[["self"]],[T]]],[11,R[22],E,E,24,[[["self"]],[R[42]]]],[11,R[141],E,E,24,[[]]],[11,R[140],E,E,24,[[]]],[11,R[23],R[149],E,26,[[["self"]],[T]]],[11,R[24],E,E,26,[[[T],["self"]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[18],E,E,26,[[[U]],[R[21]]]],[11,R[19],E,E,26,[[],[R[21]]]],[11,R[20],E,E,26,[[["self"]],[T]]],[11,R[41],E,E,26,[[["self"]],[T]]],[11,R[22],E,E,26,[[["self"]],[R[42]]]],[11,R[141],E,E,26,[[]]],[11,R[140],E,E,26,[[]]],[11,R[23],E,E,27,[[["self"]],[T]]],[11,R[24],E,E,27,[[[T],["self"]]]],[11,"into",E,E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[18],E,E,27,[[[U]],[R[21]]]],[11,R[19],E,E,27,[[],[R[21]]]],[11,R[20],E,E,27,[[["self"]],[T]]],[11,R[41],E,E,27,[[["self"]],[T]]],[11,R[22],E,E,27,[[["self"]],[R[42]]]],[11,R[141],E,E,27,[[]]],[11,R[140],E,E,27,[[]]],[11,"into",E,E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[18],E,E,28,[[[U]],[R[21]]]],[11,R[19],E,E,28,[[],[R[21]]]],[11,R[20],E,E,28,[[["self"]],[T]]],[11,R[41],E,E,28,[[["self"]],[T]]],[11,R[22],E,E,28,[[["self"]],[R[42]]]],[11,R[141],E,E,28,[[]]],[11,R[140],E,E,28,[[]]],[11,R[23],E,E,29,[[["self"]],[T]]],[11,R[24],E,E,29,[[[T],["self"]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[18],E,E,29,[[[U]],[R[21]]]],[11,R[19],E,E,29,[[],[R[21]]]],[11,R[20],E,E,29,[[["self"]],[T]]],[11,R[41],E,E,29,[[["self"]],[T]]],[11,R[22],E,E,29,[[["self"]],[R[42]]]],[11,R[141],E,E,29,[[]]],[11,R[140],E,E,29,[[]]],[11,R[150],R[60],E,2,[[["self"],[R[40]]],[[R[21],[R[73]]],[R[73]]]]],[11,R[151],E,E,2,[[["self"]],[[R[21],[R[73]]],[R[73]]]]],[11,R[27],R[142],E,13,[[["self"]]]],[11,R[27],E,E,14,[[["self"]]]],[11,R[27],R[149],E,29,[[["self"]]]],[11,"eq",R[142],E,13,[[["self"],[R[152]]],["bool"]]],[11,"eq",E,E,14,[[[R[153]],["self"]],["bool"]]],[11,"eq",R[149],E,29,[[["self"],[R[154]]],["bool"]]],[11,"clone",R[142],E,12,[[["self"]],["unitid"]]],[11,"clone",E,E,10,[[["self"]],["unitclause"]]],[11,"clone",E,E,13,[[["self"]],[R[152]]]],[11,"clone",E,E,14,[[["self"]],[R[153]]]],[11,"clone",R[60],E,1,[[["self"]],[R[119]]]],[11,"clone",R[149],E,26,[[["self"]],["litdata"]]],[11,"clone",E,E,29,[[["self"]],[R[154]]]],[11,"clone",E,E,27,[[["self"]],[R[323]]]],[11,R[58],R[142],E,11,[[],[R[79]]]],[11,R[58],R[144],E,31,[[],[R[77]]]],[11,R[58],E,E,32,[[],[R[74]]]],[11,R[58],E,E,33,[[],[R[76]]]],[11,R[58],E,E,16,[[],[R[155]]]],[11,R[58],E,E,34,[[],[R[156]]]],[11,R[58],E,E,35,[[],[R[121]]]],[11,R[58],E,E,36,[[],[R[75]]]],[11,R[58],R[143],E,15,[[],[R[370]]]],[11,R[58],R[145],E,17,[[],["clausehasher"]]],[11,R[58],R[92],E,18,[[],[R[81]]]],[11,R[58],R[146],E,21,[[],["rupcheck"]]],[11,R[58],R[147],E,22,[[],["checkerstate"]]],[11,R[58],R[148],E,23,[[],["tmpdata"]]],[11,R[58],R[127],E,24,[[],[R[122]]]],[11,R[58],R[149],E,26,[[],["litdata"]]],[11,R[58],E,E,27,[[],[R[323]]]],[11,R[58],E,E,28,[[],[R[131]]]],[11,R[58],R[60],E,2,[[],[R[386]]]],[11,"fmt",R[142],E,12,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,10,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[60],E,3,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,4,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,0,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,30,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,5,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,6,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,6,[[["self"],[R[31]]],[R[21]]]],[11,"bitor",R[144],E,31,[[[R[157]]]]],[11,"bitor",E,E,32,[[[R[157]]]]],[11,"bitor",E,E,33,[[[R[157]]]]],[11,"bitor",E,E,16,[[[R[157]]]]],[11,"bitor",E,E,34,[[[R[157]]]]],[11,"bitor",E,E,35,[[[R[157]]]]],[11,"bitor",E,E,36,[[[R[157]]]]],[11,"name",R[60],E,6,[[["self"]],[[R[57],["str"]],["str"]]]],[11,"cause",E,E,6,[[["self"]],[["fail"],[R[57],["fail"]]]]],[11,R[53],E,E,6,[[["self"]],[[R[57],[R[53]]],[R[53]]]]],[11,R[141],R[143],E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]],[11,R[141],E,E,15,[[]]],[11,R[140],E,E,15,[[]]]],"p":[[3,R[82]],[3,R[87]],[3,"Checker"],[4,R[89]],[4,R[114]],[4,R[123]],[4,R[158]],[8,R[159]],[3,R[160]],[3,"Clause"],[3,R[161]],[3,"Clauses"],[4,"UnitId"],[4,R[162]],[4,R[163]],[3,"Context"],[3,R[80]],[3,R[164]],[3,R[165]],[8,R[132]],[3,R[166]],[3,"RupCheck"],[3,R[167]],[3,"TmpData"],[3,R[168]],[8,R[134]],[3,"LitData"],[3,"VarData"],[3,R[169]],[4,R[170]],[3,R[85]],[3,R[171]],[3,R[172]],[3,"ClausesP"],[3,R[173]],[3,R[373]],[3,R[174]]]};
searchIndex["varisat_dimacs"]={"doc":"DIMCAS CNF parser and writer for the Varisat SAT solver.","i":[[3,R[54],R[48],R[387],N,N],[12,R[6],E,E,0,N],[12,R[47],E,E,0,N],[3,R[55],E,R[388],N,N],[12,"formula",E,E,1,N],[12,R[389],E,E,1,N],[12,"header",E,E,1,N],[12,R[390],E,E,1,N],[12,R[47],E,E,1,N],[12,R[391],E,E,1,N],[12,R[392],E,E,1,N],[12,"in_lit",E,E,1,N],[12,R[393],E,E,1,N],[12,R[394],E,E,1,N],[12,R[395],E,E,1,N],[12,"error",E,E,1,N],[12,R[396],E,E,1,N],[4,R[56],E,R[397],N,N],[13,R[398],E,E,2,N],[12,"line",R[49],E,2,N],[12,R[399],E,E,2,N],[13,R[400],R[48],E,2,N],[12,"line",R[49],E,2,N],[12,"index",E,E,2,N],[12,R[401],E,E,2,N],[13,R[402],R[48],E,2,N],[12,"line",R[49],E,2,N],[12,"header",E,E,2,N],[13,R[403],R[48],E,2,N],[12,"line",R[49],E,2,N],[13,"VarCount",R[48],E,2,N],[12,R[6],R[49],E,2,N],[12,R[404],E,E,2,N],[13,R[405],R[48],E,2,N],[12,R[47],R[49],E,2,N],[12,R[406],E,E,2,N],[13,R[407],R[48],E,2,N],[5,R[408],E,R[409],N,[[[R[52]]],[R[21]]]],[5,R[410],E,R[411],N,[[],[R[21]]]],[5,R[412],E,R[413],N,[[[R[29]]],[R[21]]]],[17,"_DERIVE_failure_Fail_FOR_ParserError",E,E,N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_ParserError",E,E,N,N],[11,"new",E,R[414],1,[[],[R[50]]]],[11,"parse",E,R[415],1,[[],[[R[29]],[R[21],[R[29],"error"]],["error"]]]],[11,R[416],E,R[417],1,[[],[["error"],[R[21],[R[50],"error"]],[R[50]]]]],[11,R[418],E,R[419],1,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,"eof",E,R[420],1,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,R[421],E,R[422],1,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,R[423],E,R[424],1,[[["self"]],[R[29]]]],[11,"header",E,R[425],1,[[["self"]],[[R[52]],[R[57],[R[52]]]]]],[11,R[47],E,R[426],1,[[["self"]],[R[7]]]],[11,R[6],E,R[427],1,[[["self"]],[R[7]]]],[11,"finish_literal",E,E,1,[[["self"]]]],[11,"parse_header_line",E,E,1,[[["self"]],[[R[21],[R[51]]],[R[51]]]]],[11,"invalid_header",E,E,1,[[["self"],["string"]],[[R[21],[R[51]]],[R[51]]]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[[T],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[18],E,E,1,[[[U]],[R[21]]]],[11,R[19],E,E,1,[[],[R[21]]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[42]]]],[11,"into",E,E,2,[[],[U]]],[11,R[25],E,E,2,[[["self"]],["string"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[18],E,E,2,[[[U]],[R[21]]]],[11,R[19],E,E,2,[[],[R[21]]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[42]]]],[11,"as_fail",E,E,2,[[["self"]],["fail"]]],[11,"clone",E,E,0,[[["self"]],[R[52]]]],[11,R[58],E,E,1,[[],[R[50]]]],[11,"fmt",E,E,2,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,0,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,2,[[["self"],[R[31]]],[R[21]]]],[11,"name",E,E,2,[[["self"]],[[R[57],["str"]],["str"]]]],[11,"cause",E,E,2,[[["self"]],[[R[57],["fail"]],["fail"]]]],[11,R[53],E,E,2,[[["self"]],[[R[53]],[R[57],[R[53]]]]]]],"p":[[3,R[54]],[3,R[55]],[4,R[56]]]};
searchIndex["varisat_formula"]={"doc":"Basic formula data types used by the Varisat SAT solver.","i":[[0,"cnf",R[8],R[428],N,N],[3,R[32],R[3],R[180],N,N],[12,R[6],E,E,0,N],[12,R[429],E,E,0,N],[12,R[181],E,E,0,N],[3,R[33],E,R[430],N,N],[12,"formula",E,E,1,N],[12,R[431],E,E,1,N],[12,"phantom",E,E,1,N],[0,R[9],E,E,N,N],[5,R[432],"varisat_formula::cnf::strategy",E,N,[[]]],[5,R[17],E,E,N,[[]]],[8,R[34],R[3],R[182],N,N],[10,R[26],E,R[183],2,[[["self"]]]],[10,R[376],E,R[184],2,[[["self"]],["var"]]],[11,"new_lit",E,R[185],2,[[["self"]],["lit"]]],[11,R[186],E,R[187],2,[[["self"],[R[7]]],[R[4]]]],[11,R[188],E,R[189],2,[[["self"],[R[7]]],[["lit"],[R[4],["lit"]]]]],[11,R[433],E,R[190],2,[[["self"]],[[R[5],["var"]],["var"]]]],[11,R[434],E,R[191],2,[[["self"]],[["lit"],[R[5],["lit"]]]]],[8,R[35],E,R[435],N,N],[10,R[436],E,E,3,[[],[R[7]]]],[10,R[437],E,E,3,[[],["self"]]],[11,"new",E,R[438],0,[[],[R[29]]]],[11,R[6],E,R[439],0,[[["self"]],[R[7]]]],[11,R[221],E,R[440],0,[[["self"],[R[7]]]]],[11,"len",E,R[441],0,[[["self"]],[R[7]]]],[11,"iter",E,R[442],0,[[["self"]]]],[0,"lit",R[8],R[443],N,N],[3,"Var",R[10],R[193],N,N],[12,"index",E,E,4,N],[3,"Lit",E,R[192],N,N],[12,"code",E,E,5,N],[0,R[9],E,E,N,N],[5,"var","varisat_formula::lit::strategy",E,N,[[]]],[5,"lit",E,E,N,[[]]],[6,"LitIdx",R[10],R[444],N,N],[11,R[14],E,R[445],4,[[["isize"]],["var"]]],[11,R[13],E,R[446],4,[[[R[7]]],["var"]]],[11,R[15],E,R[447],4,[[],["isize"]]],[11,"index",E,R[448],4,[[],[R[7]]]],[11,"max_var",E,R[449],4,[[],["var"]]],[11,R[450],E,R[451],4,[[],[R[7]]]],[11,"lit",E,R[452],4,[[["bool"]],["lit"]]],[11,R[11],E,R[453],4,[[],["lit"]]],[11,R[12],E,R[454],4,[[],["lit"]]],[11,"from_var",E,R[455],5,[[["var"],["bool"]],["lit"]]],[11,R[11],E,R[456],5,[[["var"]],["lit"]]],[11,R[12],E,R[457],5,[[["var"]],["lit"]]],[11,R[13],E,R[458],5,[[[R[7]],["bool"]],["lit"]]],[11,R[459],E,R[460],5,[[[R[7]]],["lit"]]],[11,"from_litidx",E,E,5,[[["bool"],["litidx"]],["lit"]]],[11,R[14],E,R[461],5,[[["isize"]],["lit"]]],[11,R[15],E,R[462],5,[[],["isize"]]],[11,"index",E,R[463],5,[[],[R[7]]]],[11,"var",E,R[464],5,[[],["var"]]],[11,R[465],E,R[466],5,[[],["bool"]]],[11,R[467],E,R[468],5,[[],["bool"]]],[11,"code",E,R[469],5,[[],[R[7]]]],[11,"map_var",E,R[470],5,[[],["lit"]]],[0,"test",R[8],E,N,N],[5,"sgen_unsat_formula","varisat_formula::test","Generate small hard unsat instances.",N,[[]]],[5,"sat_formula",E,"Generate a sat instance.",N,[[]]],[5,"conditional_pigeon_hole",E,"Generates a conditional pigeon hole principle formula.",N,[[]]],[14,"lit",R[8],R[16],N,N],[14,"var",E,R[16],N,N],[14,"lits",E,R[16],N,N],[14,"vars",E,R[16],N,N],[14,"cnf",E,R[16],N,N],[14,R[17],E,R[16],N,N],[11,"into",R[3],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[307],E,E,1,[[],["i"]]],[11,R[18],E,E,1,[[[U]],[R[21]]]],[11,R[19],E,E,1,[[],[R[21]]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[42]]]],[11,R[23],R[10],E,4,[[["self"]],[T]]],[11,R[24],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[25],E,E,4,[[["self"]],["string"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[18],E,E,4,[[[U]],[R[21]]]],[11,R[19],E,E,4,[[],[R[21]]]],[11,R[20],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[22],E,E,4,[[["self"]],[R[42]]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[24],E,E,5,[[[T],["self"]]]],[11,"into",E,E,5,[[],[U]]],[11,R[25],E,E,5,[[["self"]],["string"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[18],E,E,5,[[[U]],[R[21]]]],[11,R[19],E,E,5,[[],[R[21]]]],[11,R[20],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[22],E,E,5,[[["self"]],[R[42]]]],[11,R[26],R[3],E,0,[[["self"]]]],[11,R[376],E,E,0,[[["self"]],["var"]]],[11,R[27],E,E,0,[[["self"]]]],[11,R[27],R[10],E,4,[[["self"]]]],[11,R[27],E,E,5,[[["self"]]]],[11,"next",R[3],E,1,[[["self"]],[R[57]]]],[11,"cmp",R[10],E,4,[[["var"],["self"]],[R[28]]]],[11,"cmp",E,E,5,[[["self"],["lit"]],[R[28]]]],[11,"eq",R[3],E,0,[[["self"],[R[29]]],["bool"]]],[11,"eq",R[10],E,4,[[["var"],["self"]],["bool"]]],[11,"ne",E,E,4,[[["var"],["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"clone",E,E,4,[[["self"]],["var"]]],[11,"clone",E,E,5,[[["self"]],["lit"]]],[11,R[30],E,E,4,[[["var"],["self"]],[[R[28]],[R[57],[R[28]]]]]],[11,"lt",E,E,4,[[["var"],["self"]],["bool"]]],[11,"le",E,E,4,[[["var"],["self"]],["bool"]]],[11,"gt",E,E,4,[[["var"],["self"]],["bool"]]],[11,"ge",E,E,4,[[["var"],["self"]],["bool"]]],[11,R[30],E,E,5,[[["self"],["lit"]],[[R[28]],[R[57],[R[28]]]]]],[11,"lt",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"le",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"gt",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"ge",E,E,5,[[["self"],["lit"]],["bool"]]],[11,"from",R[3],E,0,[[[R[79]]],[R[29]]]],[11,"from",R[10],E,5,[[["var"]],["lit"]]],[11,R[58],R[3],E,0,[[],[R[29]]]],[11,"fmt",E,E,0,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",R[10],E,4,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,5,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,4,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,5,[[[R[31]],["self"]],[R[21]]]],[11,"not",E,E,5,[[],["lit"]]],[11,"bitxor",E,E,5,[[["bool"]],["lit"]]],[11,"hash",E,E,4,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]]],"p":[[3,R[32]],[3,R[33]],[8,R[34]],[8,R[35]],[3,"Var"],[3,"Lit"]]};
searchIndex["varisat_internal_macros"]={"doc":"Internal macros for the Varisat SAT solver.","i":[[5,"doc_from_attrs","varisat_internal_macros","Get the doc comment as LitStr from the attributes",N,[[],[[R[0]],["vec",[R[0]]]]]],[5,"get_doc_field",E,"Find a field inside the doc comment",N,[[["str"]],[[R[57],[R[0]]],[R[0]]]]],[5,"derive_doc_default",E,"Derives a default instance from the documentation.",N,[[[R[1]]],[R[2]]]],[5,"derive_config_update",E,"Derives an update struct and method for a config struct.",N,[[[R[1]]],[R[2]]]],[24,"DocDefault",E,E,N,N],[24,"ConfigUpdate",E,E,N,N]],"p":[]};
searchIndex["varisat_internal_proof"]={"doc":"Internal proof format for the Varisat SAT solver.","i":[[4,R[45],R[36],"Justifications for a simple clause deletion.",N,N],[13,"Redundant",E,"The clause is known to be redundant.",0,N],[13,"Simplified",E,"The clause is irred and subsumed by the clause added in…",0,N],[13,"Satisfied",E,"The clause contains a true literal.",0,N],[4,R[46],E,"A single proof step.",N,N],[13,"SolverVarName",E,"Update the global to solver var mapping.",1,N],[12,"global",R[37],E,1,N],[12,"solver",E,E,1,N],[13,"UserVarName",R[36],"Update the global to user var mapping.",1,N],[12,"global",R[37],E,1,N],[12,"user",E,E,1,N],[13,"DeleteVar",R[36],"Delete a variable.",1,N],[12,"var",R[37],E,1,N],[13,"ChangeSamplingMode",R[36],"Changes the sampling mode of a variable.",1,N],[12,"var",R[37],E,1,N],[12,"sample",E,E,1,N],[13,R[66],R[36],"Add a new input clause.",1,N],[12,R[62],R[37],E,1,N],[13,R[175],R[36],"Add a clause that is an asymmetric tautoligy (AT).",1,N],[12,R[101],R[37],E,1,N],[12,R[62],E,E,1,N],[12,R[38],E,E,1,N],[13,"UnitClauses",R[36],"Unit clauses found by top-level unit-propagation.",1,N],[12,"units",R[37],E,1,N],[13,R[102],R[36],"Delete a clause consisting of the given literals.",1,N],[12,R[62],R[37],E,1,N],[12,"proof",E,E,1,N],[13,"ChangeHashBits",R[36],"Change the number of clause hash bits used",1,N],[12,"bits",R[37],E,1,N],[13,"Model",R[36],R[110],1,N],[12,R[67],R[37],E,1,N],[13,R[111],R[36],R[112],1,N],[12,R[68],R[37],E,1,N],[13,R[69],R[36],"A subset of the assumptions that make the formula unsat.",1,N],[12,R[70],R[37],E,1,N],[12,R[38],E,E,1,N],[13,"End",R[36],"Signals the end of a proof.",1,N],[5,"lit_hash",E,"Hash a single literal.",N,[[["lit"]],[R[39]]]],[5,"lit_code_hash",E,"Hash a single literal from a code.",N,[[[R[7]]],[R[39]]]],[5,R[176],E,"A fast hash function for clauses (or other sets of…",N,[[],[R[39]]]],[0,"binary_format",E,"Binary format for varisat proofs.",N,N],[3,"Parser",R[43],E,N,N],[12,"lit_buf",E,E,2,N],[12,"hash_buf",E,E,2,N],[12,"unit_buf",E,E,2,N],[5,R[471],E,"Writes a proof step in the varisat format",N,[[[R[40]]],[R[21]]]],[5,R[472],E,"Writes a slice of literals for a varisat proof",N,[[],[R[21]]]],[5,"read_literals",E,"Read a slice of literals from a varisat proof",N,[[["vec"]],[[R[21],["error"]],["error"]]]],[5,"write_hashes",E,"Writes a slice of clause hashes for a varisat proof",N,[[],[R[21]]]],[5,"read_hashes",E,"Read a slice of clause hashes from a varisat proof",N,[[["vec"]],[[R[21],["error"]],["error"]]]],[5,"write_unit_clauses",E,"Writes a slice of unit clauses for a varisat proof",N,[[],[R[21]]]],[5,"read_unit_clauses",E,"Read a slice of unit clauses from a varisat proof",N,[[["vec"]],[[R[21],["error"]],["error"]]]],[17,"CODE_SOLVER_VAR_NAME_UPDATE",E,E,N,N],[17,"CODE_SOLVER_VAR_NAME_REMOVE",E,E,N,N],[17,"CODE_USER_VAR_NAME_UPDATE",E,E,N,N],[17,"CODE_USER_VAR_NAME_REMOVE",E,E,N,N],[17,"CODE_DELETE_VAR",E,E,N,N],[17,"CODE_CHANGE_SAMPLING_MODE_SAMPLE",E,E,N,N],[17,"CODE_CHANGE_SAMPLING_MODE_WITNESS",E,E,N,N],[17,"CODE_AT_CLAUSE_RED",E,E,N,N],[17,"CODE_AT_CLAUSE_IRRED",E,E,N,N],[17,"CODE_UNIT_CLAUSES",E,E,N,N],[17,"CODE_DELETE_CLAUSE_REDUNDANT",E,E,N,N],[17,"CODE_DELETE_CLAUSE_SIMPLIFIED",E,E,N,N],[17,"CODE_DELETE_CLAUSE_SATISFIED",E,E,N,N],[17,"CODE_CHANGE_HASH_BITS",E,E,N,N],[17,"CODE_MODEL",E,E,N,N],[17,"CODE_ADD_CLAUSE",E,E,N,N],[17,"CODE_ASSUMPTIONS",E,E,N,N],[17,"CODE_FAILED_ASSUMPTIONS",E,E,N,N],[17,"CODE_END",E,E,N,N],[11,"parse_step",E,E,2,[[["self"]],[[R[21],[R[40],"error"]],[R[40]],["error"]]]],[0,"vli_enc",R[36],"Variable length integer encoding.",N,N],[5,"write_u64","varisat_internal_proof::vli_enc","Write an encoded 64 bit number.",N,[[["u64"]],[[R[21],["error"]],["error"]]]],[5,"read_u64_fast",E,"Read an encoded 64 bit number, if at least 16 bytes…",N,[[]]],[5,"read_u64",E,"Read an encoded 64 bit number from a buffered reader.",N,[[],[["error"],["u64"],[R[21],["u64","error"]]]]],[6,"ClauseHash",R[36],E,N,N],[11,"contains_hashes",E,"Does this proof step use clause hashes?",1,[[["self"]],["bool"]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[24],E,E,0,[[[T],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[24],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[18],E,E,1,[[[U]],[R[21]]]],[11,R[19],E,E,1,[[],[R[21]]]],[11,R[20],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[22],E,E,1,[[["self"]],[R[42]]]],[11,"into",R[43],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[18],E,E,2,[[[U]],[R[21]]]],[11,R[19],E,E,2,[[],[R[21]]]],[11,R[20],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[22],E,E,2,[[["self"]],[R[42]]]],[11,R[27],R[36],E,0,[[["self"]]]],[11,"eq",E,E,0,[[["self"],[R[44]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[44]]]],[11,"clone",E,E,1,[[["self"]],[R[40]]]],[11,R[58],R[43],E,2,[[],["parser"]]],[11,"fmt",R[36],E,0,[[[R[31]],["self"]],[R[21]]]],[11,"fmt",E,E,1,[[[R[31]],["self"]],[R[21]]]]],"p":[[4,R[45]],[4,R[46]],[3,"Parser"]]};
searchIndex["varisat_lrat"]={"doc":"LRAT proof generation for the Varisat SAT solver.","i":[[3,R[177],"varisat_lrat","Proof processor that generates an LRAT proof.",N,N],[12,"binary",E,E,0,N],[12,"target",E,E,0,N],[12,"delete_open",E,E,0,N],[12,"last_added_id",E,E,0,N],[12,"buffered_deletes",E,E,0,N],[11,"new",E,"Create a lrat writing processor.",0,[[["bool"]],["writelrat"]]],[11,"flush",E,"Write out all steps processed so far.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"open_delete",E,"If necessary begin a batched delete step.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"close_delete",E,"If necessary end a batched delete step.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_delete_step",E,"Begin a batched delete step.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_add_step",E,"Begin a clause addition step.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_ids",E,"Write a list of clause ids.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_lits",E,"Write a list of literals.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_end",E,"End the current step.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"write_sep",E,"Write a separator.",0,[[["self"]],[["error"],[R[21],["error"]]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[18],E,E,0,[[[U]],[R[21]]]],[11,R[19],E,E,0,[[],[R[21]]]],[11,R[20],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[22],E,E,0,[[["self"]],[R[42]]]],[11,R[141],E,E,0,[[]]],[11,R[140],E,E,0,[[]]],[11,"drop",E,E,0,[[["self"]]]],[11,R[116],E,E,0,[[["self"],[R[117]],[R[119]]],[["error"],[R[21],["error"]]]]]],"p":[[3,R[177]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);