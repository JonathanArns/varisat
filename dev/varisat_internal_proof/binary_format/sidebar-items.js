initSidebarItems({"constant":[["CODE_ADD_CLAUSE",""],["CODE_ASSUMPTIONS",""],["CODE_AT_CLAUSE_IRRED",""],["CODE_AT_CLAUSE_RED",""],["CODE_CHANGE_HASH_BITS",""],["CODE_CHANGE_SAMPLING_MODE_SAMPLE",""],["CODE_CHANGE_SAMPLING_MODE_WITNESS",""],["CODE_DELETE_CLAUSE_REDUNDANT",""],["CODE_DELETE_CLAUSE_SATISFIED",""],["CODE_DELETE_CLAUSE_SIMPLIFIED",""],["CODE_DELETE_VAR",""],["CODE_END",""],["CODE_FAILED_ASSUMPTIONS",""],["CODE_MODEL",""],["CODE_SOLVER_VAR_NAME_REMOVE",""],["CODE_SOLVER_VAR_NAME_UPDATE",""],["CODE_UNIT_CLAUSES",""],["CODE_USER_VAR_NAME_REMOVE",""],["CODE_USER_VAR_NAME_UPDATE",""]],"fn":[["read_hashes","Read a slice of clause hashes from a varisat proof"],["read_literals","Read a slice of literals from a varisat proof"],["read_unit_clauses","Read a slice of unit clauses from a varisat proof"],["write_hashes","Writes a slice of clause hashes for a varisat proof"],["write_literals","Writes a slice of literals for a varisat proof"],["write_step","Writes a proof step in the varisat format"],["write_unit_clauses","Writes a slice of unit clauses for a varisat proof"]],"struct":[["Parser",""]]});