version: 2

jobs:
  build:
    docker:
      - image: jixone/rust-ci:rust-stable
    steps:
      - checkout
      - run: |
          export VARISAT_HAVE_DRAT_TRIM=1
          export VARISAT_HAVE_CHECK_LRAT=1
          cargo build --verbose --all --all-targets
          python3 .circleci/save_binaries.py
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - bins/*
            - tests/*

  test:
    docker:
      - image: jixone/rust-ci:varisat-tests
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          for TEST_BIN in /tmp/workspace/tests/*/*; do
            kcov coverage --include-path=varisat/src $TEST_BIN
          done
      - run: bash <(curl -s https://codecov.io/bash)

  build_dev_docs:
    docker:
      - image: jixone/rust-ci:rust-nightly
    steps:
      - checkout
      - run: |
          cargo +nightly doc --document-private-items --no-deps --all --exclude varisat-cli
          mkdir -p /tmp/workspace
          cp -r target/doc /tmp/workspace/dev_docs
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - dev_docs/*

  doctest:
    docker:
      - image: jixone/rust-ci:mdbook
    steps:
      - checkout
      - run: |
          cargo build
          cargo test --doc
          mdbook test -L dependency=target/debug/deps -L target/debug manual

  manual:
    docker:
      - image: jixone/rust-ci:mdbook
    steps:
      - checkout
      - run: mdbook build -d /tmp/workspace/manual manual
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - manual/*

  build_static_linux:
    docker:
      - image: jixone/rust-ci:rust-stable-musl
    steps:
      - checkout
      - run: |
          bash .circleci/setup_git.sh
          VER=$(bash .circleci/tag_release.sh)
          sed -i -e '/^debug = true/d' Cargo.toml
          git update-index --assume-unchanged Cargo.toml

          cargo build --target x86_64-unknown-linux-musl -p varisat-cli --release

          mkdir "varisat-linux-$VER"
          cp target/x86_64-unknown-linux-musl/release/varisat "varisat-linux-$VER"
          mkdir -p /tmp/workspace/release
          tar czf "/tmp/workspace/release/varisat-linux-$VER.tar.gz" "varisat-linux-$VER"
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - release/*
      - store_artifacts:
          path: /tmp/workspace/release

  build_static_windows:
    docker:
      - image: jixone/rust-ci:rust-stable-mingw
    steps:
      - checkout
      - run: |
          bash .circleci/setup_git.sh
          VER=$(bash .circleci/tag_release.sh)
          sed -i -e '/^debug = true/d' Cargo.toml
          git update-index --assume-unchanged Cargo.toml

          cargo build --target x86_64-pc-windows-gnu -p varisat-cli --release

          cp target/x86_64-pc-windows-gnu/release/varisat.exe .
          mkdir -p /tmp/workspace/release
          zip "/tmp/workspace/release/varisat-windows-$VER.zip" varisat.exe
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - release/*
      - store_artifacts:
          path: /tmp/workspace/release

  deploy:
    docker:
      - image: jixone/rust-ci:rust-deploy
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: |
          if [ $CIRCLE_BRANCH == staging ]; then
            bash .circleci/setup_git.sh
            VER=$(bash .circleci/tag_release.sh)

            if [[ $VER == *-* ]]; then
              VER=master
            fi

            bash .circleci/publish_gh_pages.sh git@github.com:jix/varisat.git \
              /tmp/workspace/dev_docs dev \
              /tmp/workspace/manual manual/$VER

            if [[ $VER != master ]]; then
              ghr -t $GITHUB_TOKEN \
                -u $CIRCLE_PROJECT_USERNAME \
                -r $CIRCLE_PROJECT_REPONAME \
                -c $CIRCLE_SHA1 \
                -n "Varisat $VER" \
                -b "$(sed -ne '2,${/^#/q;p}' CHANGELOG.md)" \
                -delete v$VER \
                /tmp/workspace/release

              cargo login $CARGO_TOKEN

              for PKG in $(sed '/^]/{d;q};s/"\(.*\)",\?/\1/;t;d' Cargo.toml); do
                cd $PKG
                cargo publish || { echo retrying && sleep 5 && cargo publish; }
                cd ..
              done
            fi
          fi

bors_branches: &bors_branches
  filters:
    branches:
      only: [staging, trying]

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          <<: *bors_branches
      - test:
          <<: *bors_branches
          requires: [build]
      - build_dev_docs:
          <<: *bors_branches
      - build_static_linux:
          <<: *bors_branches
      - build_static_windows:
          <<: *bors_branches
      - manual:
          <<: *bors_branches
      - doctest:
          <<: *bors_branches
      - deploy:
          <<: *bors_branches
          requires:
            - build_dev_docs
            - test
            - build_static_linux
            - build_static_windows
            - manual
            - doctest
